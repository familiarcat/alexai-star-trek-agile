version: '3.8'

services:
  # Central Dashboard (Next.js)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: alexai-dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3000
    volumes:
      - dashboard_data:/app/.next
    restart: unless-stopped
    networks:
      - alexai-network

  # Agile Management Service (Flask)
  agile:
    build:
      context: .
      dockerfile: Dockerfile.agile
    container_name: alexai-agile
    ports:
      - "8001:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - SUBDOMAIN_TYPE=agile
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - agile_data:/app/data
    restart: unless-stopped
    networks:
      - alexai-network

  # Software Development Service (Flask)
  software:
    build:
      context: .
      dockerfile: Dockerfile.software
    container_name: alexai-software
    ports:
      - "8002:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - SUBDOMAIN_TYPE=software
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - software_data:/app/data
    restart: unless-stopped
    networks:
      - alexai-network

  # Business Strategy Service (Flask)
  business:
    build:
      context: .
      dockerfile: Dockerfile.business
    container_name: alexai-business
    ports:
      - "8003:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - SUBDOMAIN_TYPE=business
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - business_data:/app/data
    restart: unless-stopped
    networks:
      - alexai-network

  # Startup Innovation Service (Flask)
  startup:
    build:
      context: .
      dockerfile: Dockerfile.startup
    container_name: alexai-startup
    ports:
      - "8004:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - SUBDOMAIN_TYPE=startup
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - startup_data:/app/data
    restart: unless-stopped
    networks:
      - alexai-network

  # n8n Workflow Orchestration
  n8n:
    image: n8nio/n8n:latest
    container_name: alexai-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_USER_MANAGEMENT_DISABLED=true
      - N8N_BASIC_AUTH_ACTIVE=false
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped
    networks:
      - alexai-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: alexai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - alexai-network

  # PostgreSQL for local development (optional)
  postgres:
    image: postgres:15-alpine
    container_name: alexai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=alexai
      - POSTGRES_USER=alexai
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-alexai123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - alexai-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: alexai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - dashboard
      - agile
      - software
      - business
      - startup
      - n8n
    restart: unless-stopped
    networks:
      - alexai-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: alexai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - alexai-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: alexai-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - alexai-network

volumes:
  dashboard_data:
  agile_data:
  software_data:
  business_data:
  startup_data:
  n8n_data:
  redis_data:
  postgres_data:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  alexai-network:
    driver: bridge 