'use client';

import React, { useState } from 'react';

// 🚀 ContentAnalyzer Component
// Generated by Revolutionary Project Generator
// Revenue Potential: Generated automatically

interface ContentAnalyzerData {
  timestamp: string;
  projectName: string;
  status: string;
  message: string;
  data: {
    input: any;
    processed: boolean;
    revenuePotential: string;
  };
  source: string;
  workflowId: string;
}

const ContentAnalyzer: React.FC = () => {
  const [inputData, setInputData] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [result, setResult] = useState<ContentAnalyzerData | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setInputData(e.target.value);
  };

  const handleProcess = async () => {
    if (!inputData.trim()) {
      setError('Please provide input data');
      return;
    }

    setIsProcessing(true);
    setError(null);
    setResult(null);

    try {
      const response = await fetch('/api/n8n-content-analyzer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ data: inputData }),
      });

      if (!response.ok) {
        throw new Error(`Processing failed: ${response.statusText}`);
      }

      const analysisResult = await response.json();
      setResult(analysisResult);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Processing failed');
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="lcars-container">
      {/* Header Panel */}
      <div className="lcars-panel lcars-primary-panel">
        <h2 className="lcars-title">🚀 My Content Analyzer</h2>
        <p className="lcars-subtitle">
          Generated by Revolutionary Project Generator
        </p>
        <p className="lcars-description">
          AI-powered analysis with real-time processing and strategic insights
        </p>
        <div className="lcars-revenue-potential">
          <strong>Revenue Potential: Generated automatically</strong>
        </div>
      </div>

      {/* Input Panel */}
      <div className="lcars-panel lcars-secondary-panel">
        <h3 className="lcars-panel-title">📝 Input Data</h3>
        <textarea
          className="lcars-textarea"
          value={inputData}
          onChange={handleInputChange}
          placeholder="Enter your data for analysis..."
          rows={6}
        />
        <button
          className={`lcars-button ${isProcessing ? 'lcars-button-disabled' : 'lcars-button-primary'}`}
          onClick={handleProcess}
          disabled={isProcessing}
        >
          {isProcessing ? '🔍 Processing...' : '🚀 Process Data'}
        </button>
      </div>

      {/* Error Display */}
      {error && (
        <div className="lcars-panel lcars-error-panel">
          <h3 className="lcars-panel-title">⚠️ Error</h3>
          <p className="lcars-error-text">{error}</p>
        </div>
      )}

      {/* Results Display */}
      {result && (
        <div className="lcars-panel lcars-success-panel">
          <h3 className="lcars-panel-title">📊 Analysis Results</h3>
          <div className="analysis-results">
            <p><strong>Status:</strong> {result.status}</p>
            <p><strong>Message:</strong> {result.message}</p>
            <p><strong>Source:</strong> {result.source}</p>
            <p><strong>Workflow ID:</strong> {result.workflowId}</p>
            <p><strong>Processed:</strong> {result.data.processed ? 'Yes' : 'No'}</p>
            <p><strong>Revenue Potential:</strong> {result.data.revenuePotential}</p>
            <p><strong>Timestamp:</strong> {new Date(result.timestamp).toLocaleString()}</p>
          </div>
        </div>
      )}

      {/* Integration Status Panel */}
      <div className="lcars-panel lcars-info-panel">
        <h3 className="lcars-panel-title">🔗 Integration Status</h3>
        <div className="lcars-integration-status">
          <p><strong>Project:</strong> My Content Analyzer</p>
          <p><strong>Status:</strong> {result ? 'Active' : 'Standby'}</p>
          <p><strong>Source:</strong> {result?.source || 'Next.js API'}</p>
          <p><strong>Fallback:</strong> Local analysis engine</p>
          <p><strong>Generated:</strong> By Revolutionary Project Generator</p>
        </div>
      </div>
    </div>
  );
};

export default ContentAnalyzer;
