import { NextRequest, NextResponse } from 'next/server';

// ðŸš€ My Content Analyzer API Route
// Generated by Revolutionary Project Generator
// Revenue Potential: Generated automatically

interface ContentAnalyzerRequest {
  // Add your request interface here
  [key: string]: any;
}

interface ContentAnalyzerResponse {
  timestamp: string;
  projectName: string;
  status: string;
  message: string;
  data: {
    input: any;
    processed: boolean;
    revenuePotential: string;
  };
  source: 'n8n-workflow' | 'fallback-analysis';
  workflowId: string;
}

// Fallback analysis function
function analyzeContentAnalyzerFallback(data: ContentAnalyzerRequest): ContentAnalyzerResponse {
  return {
    timestamp: new Date().toISOString(),
    projectName: 'My Content Analyzer',
    status: 'success',
    message: 'Analysis completed using fallback engine',
    data: {
      input: data,
      processed: true,
      revenuePotential: 'Generated by My Content Analyzer'
    },
    source: 'fallback-analysis',
    workflowId: 'ContentAnalyzer-fallback'
  };
}

export async function POST(request: NextRequest) {
  try {
    const body: ContentAnalyzerRequest = await request.json();
    
    // Try to call n8n workflow first
    const n8nUrl = process.env.N8N_BASE_URL || 'https://n8n.pbradygeorgen.com';
    const webhookPath = 'n8n-content-analyzer';
    
    try {
      const n8nResponse = await fetch(`${n8nUrl}/webhook/${webhookPath}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
        signal: AbortSignal.timeout(15000)
      });
      
      if (n8nResponse.ok) {
        const n8nResult = await n8nResponse.json();
        
        if (n8nResult.status === 'success') {
          return NextResponse.json({
            ...n8nResult,
            source: 'n8n-workflow',
            workflowId: 'ContentAnalyzer-webhook'
          });
        }
      }
    } catch (n8nError) {
      console.log('n8n workflow call failed, using fallback analysis:', n8nError);
    }
    
    // Fallback to local analysis
    const fallbackResult = analyzeContentAnalyzerFallback(body);
    
    return NextResponse.json(fallbackResult);
    
  } catch (error) {
    console.error('Error in ContentAnalyzer API:', error);
    return NextResponse.json(
      { error: 'Internal server error', message: 'Failed to process request' },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'My Content Analyzer API',
    status: 'active',
    workflowId: 'ContentAnalyzer-webhook',
    endpoints: {
      POST: '/api/n8n-content-analyzer',
      description: 'Generated by Revolutionary Project Generator'
    },
    integration: 'n8n-workflow + Next.js fallback',
    revenuePotential: 'Generated automatically',
    timestamp: new Date().toISOString()
  });
}
