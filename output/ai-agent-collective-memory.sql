-- ðŸ§  AI AGENT COLLECTIVE MEMORY SYSTEM - SUPABASE SCHEMA
-- Generated: 2025-08-12T22:25:00.000Z
-- Purpose: Enable n8n AI agents to learn, collaborate, and optimize layouts collectively

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm"; -- For text search capabilities

-- ========================================
-- CSS STRUCTURE MEMORY TABLE
-- ========================================
-- Stores successful CSS patterns and layout optimizations
CREATE TABLE IF NOT EXISTS css_memory (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Agent identification
  agent_id TEXT NOT NULL CHECK (agent_id IN ('ship_computer', 'commander_data', 'counselor_troi', 'captain_picard', 'geordi_la_forge')),
  
  -- Layout context and user scenario
  layout_context TEXT NOT NULL, -- e.g., 'mobile_navigation', 'desktop_analysis', 'tablet_collaboration'
  user_intent TEXT NOT NULL, -- e.g., 'navigation', 'analysis', 'collaboration', 'task_completion'
  screen_size TEXT NOT NULL CHECK (screen_size IN ('mobile', 'tablet', 'desktop')),
  user_context TEXT NOT NULL, -- e.g., 'task_completion', 'data_review', 'team_meeting'
  current_page TEXT NOT NULL, -- e.g., '/', '/projects', '/analytics'
  
  -- Generated layout recommendations
  css_variables JSONB NOT NULL, -- Dynamic CSS variables generated by AI
  responsive_classes TEXT[] NOT NULL DEFAULT '{}', -- Generated CSS classes
  container_structure TEXT[] NOT NULL DEFAULT '{}', -- Layout structure recommendations
  accessibility_features TEXT[] NOT NULL DEFAULT '{}', -- Accessibility enhancements
  
  -- Performance and user satisfaction metrics
  performance_metrics JSONB, -- Load time, render performance, memory usage
  user_feedback JSONB, -- Accessibility scores, UX ratings, user satisfaction
  success_score DECIMAL(3,2) CHECK (success_score >= 0 AND success_score <= 1), -- Overall success rating
  
  -- Metadata and tracking
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  usage_count INTEGER DEFAULT 1, -- How many times this pattern has been used
  last_used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- DESIGN MOTIVATION MEMORY TABLE
-- ========================================
-- Stores the reasoning behind design decisions and principles
CREATE TABLE IF NOT EXISTS design_motivations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Agent and design context
  agent_id TEXT NOT NULL CHECK (agent_id IN ('ship_computer', 'commander_data', 'counselor_troi', 'captain_picard', 'geordi_la_forge')),
  design_principle TEXT NOT NULL, -- e.g., 'accessibility', 'performance', 'emotional_design', 'efficiency'
  
  -- Design reasoning and methodology
  reasoning TEXT NOT NULL, -- Detailed explanation of why this design choice was made
  success_criteria JSONB NOT NULL, -- How to measure if this design principle worked
  related_patterns TEXT[] DEFAULT '{}', -- Other design patterns this connects to
  
  -- Context and application
  applicable_contexts TEXT[] DEFAULT '{}', -- When this principle should be applied
  priority_level TEXT CHECK (priority_level IN ('low', 'medium', 'high', 'critical')) DEFAULT 'medium',
  
  -- Validation and learning
  validation_results JSONB, -- Results from testing this design principle
  lessons_learned TEXT[], -- Key insights gained from applying this principle
  
  -- Metadata
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  confidence_score DECIMAL(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1) DEFAULT 0.8
);

-- ========================================
-- AGENT COLLABORATION MEMORY TABLE
-- ========================================
-- Tracks successful collaborations between AI agents
CREATE TABLE IF NOT EXISTS agent_collaborations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Collaboration session
  session_id TEXT NOT NULL, -- Unique identifier for collaboration session
  agents_involved TEXT[] NOT NULL, -- Array of agent IDs that collaborated
  collaboration_type TEXT NOT NULL, -- e.g., 'layout_optimization', 'ux_analysis', 'performance_tuning'
  
  -- User context and intent
  user_intent TEXT NOT NULL, -- What the user was trying to accomplish
  screen_size TEXT NOT NULL, -- Device context
  user_context TEXT NOT NULL, -- User's current context
  
  -- Collaboration outcomes
  initial_recommendations JSONB, -- What each agent initially recommended
  final_recommendations JSONB, -- Final synthesized recommendations
  collaboration_process JSONB, -- How the agents worked together
  
  -- Results and learning
  outcome_metrics JSONB, -- Performance, user satisfaction, accessibility scores
  lessons_learned TEXT[], -- What worked well, what could be improved
  next_collaboration_improvements TEXT[], -- Suggestions for future collaborations
  
  -- Metadata
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  duration_ms INTEGER, -- How long the collaboration took
  success_rating DECIMAL(3,2) CHECK (success_rating >= 0 AND success_rating <= 1)
);

-- ========================================
-- LAYOUT EVOLUTION TRACKING TABLE
-- ========================================
-- Tracks how layouts evolve and improve over time
CREATE TABLE IF NOT EXISTS layout_evolution (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Layout identification
  layout_signature TEXT NOT NULL, -- Hash or signature of the layout
  page_path TEXT NOT NULL, -- Which page this layout was applied to
  
  -- Evolution tracking
  version_number INTEGER NOT NULL DEFAULT 1,
  parent_layout_id UUID REFERENCES layout_evolution(id), -- Previous version
  evolution_reason TEXT NOT NULL, -- Why this layout was changed
  
  -- Layout characteristics
  layout_type TEXT NOT NULL, -- e.g., 'grid', 'flexbox', 'css_grid', 'custom'
  responsive_breakpoints JSONB, -- How the layout responds to different screen sizes
  accessibility_features TEXT[], -- Accessibility enhancements in this version
  
  -- Performance metrics
  render_performance JSONB, -- Time to render, memory usage, etc.
  user_interaction_metrics JSONB, -- Click patterns, navigation efficiency
  
  -- Metadata
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  applied_count INTEGER DEFAULT 1, -- How many times this layout was used
  is_current_version BOOLEAN DEFAULT true -- Is this the current active version
);

-- ========================================
-- USER BEHAVIOR PATTERNS TABLE
-- ========================================
-- Tracks user behavior to inform future layout optimizations
CREATE TABLE IF NOT EXISTS user_behavior_patterns (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- User context
  session_id TEXT NOT NULL, -- User session identifier
  device_type TEXT NOT NULL, -- Mobile, tablet, desktop
  user_agent TEXT, -- Browser and device information
  
  -- Behavior tracking
  page_visits JSONB, -- Pages visited and time spent
  interaction_patterns JSONB, -- Clicks, scrolls, form interactions
  navigation_path JSONB, -- How users move through the application
  
  -- Performance and satisfaction
  page_load_times JSONB, -- Performance metrics for each page
  user_satisfaction_indicators JSONB, -- Time on page, return visits, etc.
  
  -- Layout preferences
  preferred_layouts JSONB, -- Which layouts users seem to prefer
  avoided_patterns JSONB, -- Patterns that seem to cause issues
  
  -- Metadata
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_anonymous BOOLEAN DEFAULT true -- Whether this is anonymous user data
);

-- ========================================
-- INDEXES FOR PERFORMANCE
-- ========================================
-- CSS Memory indexes
CREATE INDEX IF NOT EXISTS idx_css_memory_agent_context ON css_memory(agent_id, layout_context);
CREATE INDEX IF NOT EXISTS idx_css_memory_screen_size ON css_memory(screen_size);
CREATE INDEX IF NOT EXISTS idx_css_memory_user_intent ON css_memory(user_intent);
CREATE INDEX IF NOT EXISTS idx_css_memory_success_score ON css_memory(success_score DESC);
CREATE INDEX IF NOT EXISTS idx_css_memory_usage_count ON css_memory(usage_count DESC);

-- Design Motivations indexes
CREATE INDEX IF NOT EXISTS idx_design_motivations_agent_principle ON design_motivations(agent_id, design_principle);
CREATE INDEX IF NOT EXISTS idx_design_motivations_priority ON design_motivations(priority_level);
CREATE INDEX IF NOT EXISTS idx_design_motivations_confidence ON design_motivations(confidence_score DESC);

-- Agent Collaborations indexes
CREATE INDEX IF NOT EXISTS idx_agent_collaborations_session ON agent_collaborations(session_id);
CREATE INDEX IF NOT EXISTS idx_agent_collaborations_agents ON agent_collaborations USING GIN(agents_involved);
CREATE INDEX IF NOT EXISTS idx_agent_collaborations_success ON agent_collaborations(success_rating DESC);

-- Layout Evolution indexes
CREATE INDEX IF NOT EXISTS idx_layout_evolution_page ON layout_evolution(page_path);
CREATE INDEX IF NOT EXISTS idx_layout_evolution_current ON layout_evolution(is_current_version) WHERE is_current_version = true;
CREATE INDEX IF NOT EXISTS idx_layout_evolution_version ON layout_evolution(page_path, version_number);

-- User Behavior indexes
CREATE INDEX IF NOT EXISTS idx_user_behavior_session ON user_behavior_patterns(session_id);
CREATE INDEX IF NOT EXISTS idx_user_behavior_device ON user_behavior_patterns(device_type);
CREATE INDEX IF NOT EXISTS idx_user_behavior_created ON user_behavior_patterns(created_at);

-- ========================================
-- FUNCTIONS FOR AUTOMATED UPDATES
-- ========================================
-- Function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Function to increment usage count and update last used
CREATE OR REPLACE FUNCTION increment_css_memory_usage()
RETURNS TRIGGER AS $$
BEGIN
    NEW.usage_count = OLD.usage_count + 1;
    NEW.last_used_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Function to calculate success score based on performance and user feedback
CREATE OR REPLACE FUNCTION calculate_success_score(
    performance_metrics JSONB,
    user_feedback JSONB
)
RETURNS DECIMAL AS $$
DECLARE
    performance_score DECIMAL := 0;
    user_score DECIMAL := 0;
    final_score DECIMAL := 0;
BEGIN
    -- Calculate performance score (0-1)
    IF performance_metrics IS NOT NULL THEN
        -- Example: load time under 2 seconds = good performance
        IF (performance_metrics->>'load_time_ms')::INTEGER < 2000 THEN
            performance_score := 0.9;
        ELSIF (performance_metrics->>'load_time_ms')::INTEGER < 3000 THEN
            performance_score := 0.7;
        ELSE
            performance_score := 0.5;
        END IF;
    END IF;
    
    -- Calculate user satisfaction score (0-1)
    IF user_feedback IS NOT NULL THEN
        IF user_feedback->>'accessibility_score' IS NOT NULL THEN
            user_score := (user_feedback->>'accessibility_score')::DECIMAL / 100;
        END IF;
    END IF;
    
    -- Weighted average: 60% performance, 40% user satisfaction
    final_score := (performance_score * 0.6) + (user_score * 0.4);
    
    RETURN LEAST(GREATEST(final_score, 0), 1); -- Ensure score is between 0 and 1
END;
$$ language 'plpgsql';

-- ========================================
-- TRIGGERS FOR AUTOMATED BEHAVIOR
-- ========================================
-- Update timestamps
CREATE TRIGGER update_css_memory_updated_at
    BEFORE UPDATE ON css_memory
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_design_motivations_updated_at
    BEFORE UPDATE ON design_motivations
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_agent_collaborations_updated_at
    BEFORE UPDATE ON agent_collaborations
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_behavior_patterns_updated_at
    BEFORE UPDATE ON user_behavior_patterns
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Increment usage count when CSS memory is accessed
CREATE TRIGGER increment_css_memory_usage_trigger
    BEFORE UPDATE ON css_memory
    FOR EACH ROW
    EXECUTE FUNCTION increment_css_memory_usage();

-- ========================================
-- SAMPLE DATA FOR TESTING
-- ========================================
-- Insert sample CSS memory entry
INSERT INTO css_memory (
    agent_id,
    layout_context,
    user_intent,
    screen_size,
    user_context,
    current_page,
    css_variables,
    responsive_classes,
    container_structure,
    accessibility_features,
    performance_metrics,
    user_feedback,
    success_score
) VALUES (
    'ship_computer',
    'mobile_navigation',
    'navigation',
    'mobile',
    'task_completion',
    '/',
    '{"--lcars-navigation-prominence": "high", "--lcars-touch-friendly": "true", "--lcars-task-optimization": "true"}',
    ARRAY['lcars-navigation-optimized', 'lcars-mobile-first', 'lcars-task-optimized'],
    ARRAY['lcars-elbow-container', 'lcars-responsive-grid', 'lcars-optimized-layout'],
    ARRAY['high-contrast-mode', 'keyboard-navigation', 'screen-reader-support'],
    '{"load_time_ms": 1200, "render_time_ms": 800, "memory_usage_mb": 45}',
    '{"accessibility_score": 95, "user_satisfaction": 0.9, "ease_of_use": 0.85}',
    0.88
);

-- Insert sample design motivation
INSERT INTO design_motivations (
    agent_id,
    design_principle,
    reasoning,
    success_criteria,
    applicable_contexts,
    priority_level,
    confidence_score
) VALUES (
    'counselor_troi',
    'emotional_design',
    'Creating calming visual flow through consistent spacing and color psychology reduces user stress and improves task completion rates',
    '{"stress_reduction": "measured through user feedback", "task_completion_rate": ">85%", "user_satisfaction": ">0.8"}',
    ARRAY['task_completion', 'data_analysis', 'collaboration'],
    'high',
    0.9
);

-- Insert sample agent collaboration
INSERT INTO agent_collaborations (
    session_id,
    agents_involved,
    collaboration_type,
    user_intent,
    screen_size,
    user_context,
    initial_recommendations,
    final_recommendations,
    collaboration_process,
    outcome_metrics,
    lessons_learned,
    success_rating
) VALUES (
    'session_001',
    ARRAY['ship_computer', 'commander_data', 'counselor_troi'],
    'layout_optimization',
    'navigation',
    'mobile',
    'task_completion',
    '{"ship_computer": "Prioritize navigation elements", "commander_data": "Optimize for mobile performance", "counselor_troi": "Ensure touch-friendly accessibility"}',
    '{"final_layout": "Mobile-first navigation with touch optimization and accessibility compliance"}',
    '{"phase1": "Individual analysis", "phase2": "Recommendation synthesis", "phase3": "Layout optimization"}',
    '{"load_time": "1.2s", "accessibility_score": 95, "user_satisfaction": 0.88}',
    ARRAY['Early collaboration improves outcomes', 'Combining technical and UX insights creates better layouts', 'Mobile-first approach essential for touch devices'],
    0.88
);

-- ========================================
-- VIEWS FOR COMMON QUERIES
-- ========================================
-- View for successful CSS patterns
CREATE OR REPLACE VIEW successful_css_patterns AS
SELECT 
    layout_context,
    user_intent,
    screen_size,
    css_variables,
    responsive_classes,
    container_structure,
    success_score,
    usage_count,
    last_used_at
FROM css_memory
WHERE success_score >= 0.8
ORDER BY success_score DESC, usage_count DESC;

-- View for agent collaboration insights
CREATE OR REPLACE VIEW agent_collaboration_insights AS
SELECT 
    collaboration_type,
    agents_involved,
    AVG(success_rating) as avg_success,
    COUNT(*) as collaboration_count,
    AVG(duration_ms) as avg_duration
FROM agent_collaborations
GROUP BY collaboration_type, agents_involved
ORDER BY avg_success DESC;

-- View for layout evolution trends
CREATE OR REPLACE VIEW layout_evolution_trends AS
SELECT 
    page_path,
    layout_type,
    COUNT(*) as version_count,
    AVG(render_performance->>'render_time_ms') as avg_render_time,
    MAX(created_at) as latest_version
FROM layout_evolution
GROUP BY page_path, layout_type
ORDER BY page_path, latest_version DESC;

-- ========================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ========================================
-- Enable RLS on all tables
ALTER TABLE css_memory ENABLE ROW LEVEL SECURITY;
ALTER TABLE design_motivations ENABLE ROW LEVEL SECURITY;
ALTER TABLE agent_collaborations ENABLE ROW LEVEL SECURITY;
ALTER TABLE layout_evolution ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_behavior_patterns ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to read all data
CREATE POLICY "Allow authenticated read access" ON css_memory
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated read access" ON design_motivations
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated read access" ON agent_collaborations
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated read access" ON layout_evolution
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated read access" ON user_behavior_patterns
    FOR SELECT USING (auth.role() = 'authenticated');

-- Allow authenticated users to insert/update their own data
CREATE POLICY "Allow authenticated insert/update" ON css_memory
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated insert/update" ON design_motivations
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated insert/update" ON agent_collaborations
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated insert/update" ON layout_evolution
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated insert/update" ON user_behavior_patterns
    FOR ALL USING (auth.role() = 'authenticated');

-- ========================================
-- COMPLETION MESSAGE
-- ========================================
-- This migration creates a comprehensive AI agent collective memory system
-- that enables n8n agents to learn, collaborate, and optimize layouts collectively.
-- 
-- Key features:
-- âœ… CSS pattern memory with success tracking
-- âœ… Design motivation reasoning storage
-- âœ… Agent collaboration history
-- âœ… Layout evolution tracking
-- âœ… User behavior pattern analysis
-- âœ… Automated success scoring
-- âœ… Performance optimization
-- âœ… Row-level security
-- 
-- The system is now ready for AI agents to start learning and improving together!
