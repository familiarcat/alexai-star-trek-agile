[
  {
    "name": "AlexAI Bilateral Learning Workflow",
    "nodes": [
      {
        "parameters": {
          "path": "bilateral-learning",
          "options": {}
        },
        "id": "bilateral-learning-webhook",
        "name": "Bilateral Learning Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "webhookId": "bilateral-learning-trigger"
      },
      {
        "parameters": {
          "jsCode": "// Knowledge Discovery and Categorization\nconst processKnowledgeUpdate = () => {\n  const input = $input.all()[0].json;\n  \n  // Extract information about new files or updates\n  const fileType = input.fileType || 'unknown';\n  const filePath = input.filePath || '';\n  const content = input.content || '';\n  const updateType = input.updateType || 'creation';\n  \n  // Determine knowledge domain based on file content and path\n  let knowledgeDomain = '06-reference';\n  let agentRelevance = [];\n  \n  // Analyze file content for categorization\n  const contentLower = content.toLowerCase();\n  const pathLower = filePath.toLowerCase();\n  \n  // Domain classification logic\n  if (pathLower.includes('architecture') || contentLower.includes('system design') || contentLower.includes('lcars')) {\n    knowledgeDomain = '01-foundations/architecture';\n    agentRelevance = ['captain-picard', 'chief-engineer-scott'];\n  } else if (pathLower.includes('security') || contentLower.includes('security') || contentLower.includes('authentication')) {\n    knowledgeDomain = '01-foundations/standards/security-protocols';\n    agentRelevance = ['lieutenant-worf', 'commander-spock'];\n  } else if (pathLower.includes('agent') || pathLower.includes('crew') || pathLower.includes('n8n')) {\n    knowledgeDomain = '02-ai-agents';\n    agentRelevance = ['lieutenant-data', 'commander-spock'];\n  } else if (pathLower.includes('deploy') || pathLower.includes('script') || contentLower.includes('deployment')) {\n    knowledgeDomain = '03-operations';\n    agentRelevance = ['chief-engineer-scott', 'lieutenant-data'];\n  } else if (pathLower.includes('project') || contentLower.includes('agile') || contentLower.includes('kanban')) {\n    knowledgeDomain = '04-projects';\n    agentRelevance = ['captain-picard', 'counselor-troi'];\n  } else if (pathLower.includes('learn') || contentLower.includes('evolution') || contentLower.includes('improvement')) {\n    knowledgeDomain = '05-evolution';\n    agentRelevance = ['commander-spock', 'lieutenant-data'];\n  }\n  \n  // Extract key insights from content\n  const insights = extractKeyInsights(content, fileType);\n  \n  // Generate learning opportunities\n  const learningOpportunities = generateLearningOpportunities(content, agentRelevance);\n  \n  const processedUpdate = {\n    ...input,\n    knowledgeDomain,\n    agentRelevance,\n    insights,\n    learningOpportunities,\n    processingTimestamp: new Date().toISOString(),\n    bilateral: true\n  };\n  \n  return [{ json: processedUpdate }];\n};\n\n// Extract key insights from content\nfunction extractKeyInsights(content, fileType) {\n  const insights = [];\n  \n  if (fileType === 'markdown') {\n    // Extract headings as key topics\n    const headingMatches = content.match(/#{1,6}\\s+(.+)/g);\n    if (headingMatches) {\n      insights.push(...headingMatches.map(h => h.replace(/#{1,6}\\s+/, '')));\n    }\n    \n    // Extract key phrases\n    if (content.includes('✅')) insights.push('Contains completed tasks or achievements');\n    if (content.includes('❌')) insights.push('Contains identified issues or failures');\n    if (content.includes('🎯')) insights.push('Contains goals or targets');\n    if (content.includes('⚠️')) insights.push('Contains warnings or cautions');\n  } else if (fileType === 'shell') {\n    // Extract function names and key operations\n    const functionMatches = content.match(/function\\s+(\\w+)|([\\w_]+)\\s*\\(\\s*\\)/g);\n    if (functionMatches) {\n      insights.push('Contains functions: ' + functionMatches.join(', '));\n    }\n    \n    if (content.includes('curl')) insights.push('Contains API interactions');\n    if (content.includes('npm') || content.includes('yarn')) insights.push('Contains package management');\n    if (content.includes('docker')) insights.push('Contains containerization');\n  }\n  \n  return insights.slice(0, 10); // Limit to top 10 insights\n}\n\n// Generate learning opportunities for agents\nfunction generateLearningOpportunities(content, agentRelevance) {\n  const opportunities = [];\n  \n  for (const agent of agentRelevance) {\n    switch (agent) {\n      case 'captain-picard':\n        opportunities.push({\n          agent: 'captain-picard',\n          opportunity: 'Strategic leadership insights and project coordination patterns',\n          application: 'Apply to future strategic decision-making'\n        });\n        break;\n      case 'lieutenant-data':\n        opportunities.push({\n          agent: 'lieutenant-data',\n          opportunity: 'Technical implementation patterns and system operations',\n          application: 'Enhance technical analysis and operational efficiency'\n        });\n        break;\n      case 'counselor-troi':\n        opportunities.push({\n          agent: 'counselor-troi',\n          opportunity: 'Team dynamics and collaboration effectiveness',\n          application: 'Improve team coordination and user experience'\n        });\n        break;\n      case 'chief-engineer-scott':\n        opportunities.push({\n          agent: 'chief-engineer-scott',\n          opportunity: 'Engineering solutions and performance optimization',\n          application: 'Apply to technical problem-solving and system efficiency'\n        });\n        break;\n      case 'commander-spock':\n        opportunities.push({\n          agent: 'commander-spock',\n          opportunity: 'Logical analysis frameworks and optimization strategies',\n          application: 'Enhance analytical decision-making processes'\n        });\n        break;\n      case 'lieutenant-worf':\n        opportunities.push({\n          agent: 'lieutenant-worf',\n          opportunity: 'Security protocols and risk management strategies',\n          application: 'Strengthen security posture and threat assessment'\n        });\n        break;\n    }\n  }\n  \n  return opportunities;\n}\n\nreturn processKnowledgeUpdate();"
        },
        "id": "knowledge-processor",
        "name": "Knowledge Discovery Processor",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          440,
          300
        ]
      },
      {
        "parameters": {
          "url": "https://alexai-star-trek-agile.vercel.app/api/knowledge",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"domain\": \"{{ $json.knowledgeDomain }}\",\n  \"filename\": \"bilateral-learning-{{ Date.now() }}.md\",\n  \"content\": \"# Bilateral Learning Entry\\n\\n**Generated:** {{ $json.processingTimestamp }}\\n**Domain:** {{ $json.knowledgeDomain }}\\n**Agent Relevance:** {{ $json.agentRelevance.join(', ') }}\\n\\n## Key Insights\\n{{ $json.insights.map(i => '- ' + i).join('\\\\n') }}\\n\\n## Learning Opportunities\\n{{ $json.learningOpportunities.map(o => '### ' + o.agent + '\\\\n- **Opportunity:** ' + o.opportunity + '\\\\n- **Application:** ' + o.application).join('\\\\n\\\\n') }}\\n\\n## Original Content Reference\\n**File:** {{ $json.filePath }}\\n**Type:** {{ $json.fileType }}\\n**Update:** {{ $json.updateType }}\\n\\n---\\n*Auto-generated by Bilateral Learning Workflow*\",\n  \"agent\": \"bilateral-learning-system\"\n}",
          "options": {
            "responseTimeout": 30000
          }
        },
        "id": "update-knowledge-base",
        "name": "Update Knowledge Base",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          640,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Agent Enhancement Notification\nconst notifyAgents = () => {\n  const input = $input.all()[0].json;\n  \n  // Create notifications for relevant agents\n  const notifications = [];\n  \n  for (const agent of input.agentRelevance) {\n    notifications.push({\n      agent: agent,\n      notificationType: 'knowledge-enhancement',\n      message: `New knowledge available in domain: ${input.knowledgeDomain}`,\n      insights: input.insights,\n      learningOpportunities: input.learningOpportunities.filter(o => o.agent === agent),\n      timestamp: new Date().toISOString(),\n      priority: input.updateType === 'critical' ? 'high' : 'normal'\n    });\n  }\n  \n  // Create summary for system monitoring\n  const summary = {\n    totalAgentsNotified: notifications.length,\n    knowledgeDomain: input.knowledgeDomain,\n    insightsGenerated: input.insights.length,\n    learningOpportunitiesCreated: input.learningOpportunities.length,\n    bilateralLearningActive: true,\n    processingComplete: true,\n    timestamp: new Date().toISOString()\n  };\n  \n  return [\n    { json: { notifications, summary } }\n  ];\n};\n\nreturn notifyAgents();"
        },
        "id": "agent-enhancer",
        "name": "Agent Enhancement Notifier",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          840,
          300
        ]
      },
      {
        "parameters": {
          "url": "https://alexai-star-trek-agile.vercel.app/api/crew/enhanced-knowledge-integration",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"action\": \"bulk-enhancement\",\n  \"notifications\": \"{{ $json.notifications }}\",\n  \"summary\": \"{{ JSON.stringify($json.summary) }}\",\n  \"bilateralLearning\": true\n}",
          "options": {
            "responseTimeout": 30000
          }
        },
        "id": "enhance-agents",
        "name": "Enhance Agent Capabilities",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          1040,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "{\n  \"status\": \"Bilateral Learning Complete\",\n  \"knowledgeDomain\": \"{{ $json.knowledgeDomain }}\",\n  \"agentsEnhanced\": {{ $json.agentRelevance.length }},\n  \"insightsGenerated\": {{ $json.insights.length }},\n  \"learningActive\": true,\n  \"timestamp\": \"{{ $json.processingTimestamp }}\",\n  \"message\": \"Knowledge successfully integrated into agent capabilities. Brain trust enhanced.\"\n}",
          "responseHeaders": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Bilateral-Learning",
                "value": "active"
              }
            ]
          }
        },
        "id": "learning-complete",
        "name": "Learning Complete Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1240,
          300
        ]
      }
    ],
    "connections": {
      "bilateral-learning-webhook": {
        "main": [
          [
            {
              "node": "knowledge-processor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "knowledge-processor": {
        "main": [
          [
            {
              "node": "update-knowledge-base",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "update-knowledge-base": {
        "main": [
          [
            {
              "node": "agent-enhancer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "agent-enhancer": {
        "main": [
          [
            {
              "node": "enhance-agents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhance-agents": {
        "main": [
          [
            {
              "node": "learning-complete",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "timezone": "America/Chicago"
    },
    "tags": [
      "AlexAI",
      "Bilateral-Learning",
      "Knowledge-Enhancement"
    ],
    "triggerCount": 0,
    "id": "nOhIA5fCCA4nH2iO"
  },
  {
    "id": "GdUeCvIS0SNDebBr",
    "name": "AlexAI ChatGPT 5 Ready - Multi-LLM Crew Coordination",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request-chatgpt5",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "webhook-trigger",
        "name": "Crew Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "webhookId": "crew-request-chatgpt5"
      },
      {
        "parameters": {
          "jsCode": "// LLM Provider Selection Logic\nconst userRequest = $input.first().json;\nconst preferredLLM = userRequest.preferredLLM || 'claude';\nconst useChatGPT5 = userRequest.useChatGPT5 || false;\n\n// Determine which LLM endpoint to use\nlet llmConfig;\n\nif (useChatGPT5 && preferredLLM === 'chatgpt') {\n  // ChatGPT 5 Configuration\n  llmConfig = {\n    provider: 'openai',\n    model: 'gpt-5',\n    baseUrl: 'https://api.openai.com/v1',\n    apiKey: '{{ $env.OPENAI_API_KEY }}',\n    maxTokens: 4000,\n    temperature: 0.3\n  };\n} else if (preferredLLM === 'claude') {\n  // Claude 3.5 Sonnet Configuration\n  llmConfig = {\n    provider: 'anthropic',\n    model: 'anthropic/claude-3.5-sonnet',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    apiKey: '{{ $env.OPENROUTER_API_KEY }}',\n    maxTokens: 2000,\n    temperature: 0.3\n  };\n} else if (preferredLLM === 'gpt4') {\n  // GPT-4 Configuration\n  llmConfig = {\n    provider: 'openai',\n    model: 'gpt-4',\n    baseUrl: 'https://api.openai.com/v1',\n    apiKey: '{{ $env.OPENAI_API_KEY }}',\n    maxTokens: 4000,\n    temperature: 0.3\n  };\n} else {\n  // Default to Claude\n  llmConfig = {\n    provider: 'anthropic',\n    model: 'anthropic/claude-3.5-sonnet',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    apiKey: '{{ $env.OPENROUTER_API_KEY }}',\n    maxTokens: 2000,\n    temperature: 0.3\n  };\n}\n\n// Prepare the request with LLM configuration\nconst enhancedRequest = {\n  ...userRequest,\n  llmConfig,\n  timestamp: new Date().toISOString(),\n  modelInfo: {\n    provider: llmConfig.provider,\n    model: llmConfig.model,\n    maxTokens: llmConfig.maxTokens\n  }\n};\n\nreturn enhancedRequest;"
        },
        "id": "llm-selector",
        "name": "LLM Provider Selector",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          480,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $json.llmConfig.baseUrl }}/chat/completions",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $json.llmConfig.apiKey }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"{{ $json.llmConfig.model }}\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are the Ship's Computer from Star Trek: The Next Generation. Analyze the user's request and return ONLY one crew member name: picard, data, troi, scott, spock, worf, or observation-lounge\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Query: {{ $json.query }}\\nContext: {{ $json.context || 'general' }}\\nRole: {{ $json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": {{ $json.llmConfig.maxTokens }},\n  \"temperature\": {{ $json.llmConfig.temperature }}\n}",
          "options": {}
        },
        "id": "ai-analysis",
        "name": "AI Analysis with Dynamic LLM",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          720,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Crew Response Generator with LLM Context\nconst aiResponse = $input.first().json.choices[0].message.content.toLowerCase();\nconst originalRequest = $('LLM Provider Selector').first().json;\n\n// Determine crew member endpoint\nlet crewMember = 'captain-picard'; // default\nif (aiResponse.includes('data')) crewMember = 'lieutenant-data';\nelse if (aiResponse.includes('troi')) crewMember = 'counselor-troi';\nelse if (aiResponse.includes('scott')) crewMember = 'chief-engineer-scott';\nelse if (aiResponse.includes('spock')) crewMember = 'commander-spock';\nelse if (aiResponse.includes('worf')) crewMember = 'lieutenant-worf';\nelse if (aiResponse.includes('observation')) crewMember = 'observation-lounge';\n\n// Prepare request for crew member\nconst crewRequest = {\n  query: originalRequest.query,\n  context: originalRequest.context || 'general',\n  userRole: originalRequest.userRole || 'developer',\n  urgency: originalRequest.urgency || 'normal',\n  selectedCrew: crewMember,\n  aiSelection: aiResponse,\n  llmInfo: originalRequest.modelInfo\n};\n\nreturn crewRequest;"
        },
        "id": "crew-response-generator",
        "name": "Crew Response Generator",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          960,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"selectedCrew\": {{ JSON.stringify($('Crew Response Generator').first().json.selectedCrew) }},\n  \"aiSelection\": {{ JSON.stringify($('Crew Response Generator').first().json.aiSelection) }},\n  \"llmInfo\": {{ JSON.stringify($('Crew Response Generator').first().json.llmInfo) }},\n  \"timestamp\": {{ JSON.stringify(new Date().toISOString()) }}\n}",
          "options": {}
        },
        "id": "response-formatter",
        "name": "Enhanced Response Formatter",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1200,
          300
        ]
      }
    ],
    "connections": {
      "Crew Request Webhook": {
        "main": [
          [
            {
              "node": "LLM Provider Selector",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LLM Provider Selector": {
        "main": [
          [
            {
              "node": "AI Analysis with Dynamic LLM",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Analysis with Dynamic LLM": {
        "main": [
          [
            {
              "node": "Crew Response Generator",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Response Generator": {
        "main": [
          [
            {
              "node": "Enhanced Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "52fc4142-a579-4a46-b86c-947dab562fd3",
    "createdAt": "2025-08-10T01:21:52.225Z",
    "updatedAt": "2025-08-10T21:23:03.411Z"
  },
  {
    "id": "ChatGPT5EnhancedBilateralSync",
    "name": "AlexAI ChatGPT 5 Enhanced - Bilateral Sync Integration",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "chatgpt5-enhanced-prompt",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "webhook-trigger",
        "name": "Enhanced ChatGPT 5 Prompt Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "webhookId": "chatgpt5-enhanced-prompt"
      },
      {
        "parameters": {
          "jsCode": "// Enhanced ChatGPT 5 Request Processor\nconst userRequest = $input.first().json;\nconst { query, context, userRole, urgency, complexity, preferredLLM, useChatGPT5 } = userRequest;\n\n// Load LLM configuration from bilateral sync system\nconst llmConfig = {\n  chatgpt5: {\n    provider: 'openai',\n    model: 'gpt-5',\n    baseUrl: 'https://api.openai.com/v1',\n    apiKey: '{{ $env.OPENAI_API_KEY }}',\n    maxTokens: 4000,\n    temperature: 0.3,\n    advancedFeatures: {\n      functionCalling: true,\n      vision: true,\n      codeInterpreter: true,\n      retrieval: true\n    }\n  },\n  claude: {\n    provider: 'anthropic',\n    model: 'anthropic/claude-3.5-sonnet',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    apiKey: '{{ $env.OPENROUTER_API_KEY }}',\n    maxTokens: 2000,\n    temperature: 0.3\n  }\n};\n\n// Determine optimal LLM based on request characteristics\nlet selectedLLM;\nlet reasoning;\n\nif (useChatGPT5 && preferredLLM === 'chatgpt') {\n  selectedLLM = 'chatgpt5';\n  reasoning = 'User explicitly requested ChatGPT 5 for enhanced capabilities';\n} else if (complexity === 'complex' || complexity === 'expert') {\n  selectedLLM = 'chatgpt5';\n  reasoning = 'Complex request requires ChatGPT 5 advanced reasoning';\n} else if (context === 'technical' || context === 'engineering') {\n  selectedLLM = 'chatgpt5';\n  reasoning = 'Technical context benefits from ChatGPT 5 code interpretation';\n} else if (urgency === 'critical' || urgency === 'high') {\n  selectedLLM = 'chatgpt5';\n  reasoning = 'High urgency requires ChatGPT 5 superior problem-solving';\n} else {\n  selectedLLM = 'claude';\n  reasoning = 'Standard request suitable for Claude cost-effectiveness';\n}\n\n// Prepare enhanced request with LLM selection\nconst enhancedRequest = {\n  ...userRequest,\n  selectedLLM,\n  llmConfig: llmConfig[selectedLLM],\n  reasoning,\n  timestamp: new Date().toISOString(),\n  bilateralSync: {\n    enabled: true,\n    autoSync: true,\n    syncPriority: selectedLLM === 'chatgpt5' ? 'high' : 'normal'\n  }\n};\n\nreturn enhancedRequest;"
        },
        "id": "llm-intelligence-selector",
        "name": "Intelligent LLM Selector",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          480,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $json.llmConfig.baseUrl }}/chat/completions",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $json.llmConfig.apiKey }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"{{ $json.llmConfig.model }}\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are the Ship's Computer from Star Trek: The Next Generation, enhanced with ChatGPT 5 capabilities. Your role is to analyze user requests with exceptional intelligence and provide strategic insights using advanced reasoning capabilities. Coordinate with the AlexAI crew system for optimal responses and leverage advanced features for superior problem-solving.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Query: {{ $json.query }}\\nContext: {{ $json.context || 'general' }}\\nRole: {{ $json.userRole || 'developer' }}\\nUrgency: {{ $json.urgency || 'normal' }}\\nComplexity: {{ $json.complexity || 'medium' }}\\n\\nPlease analyze this request and provide:\\n1. Recommended Star Trek crew member (picard, data, troi, scott, spock, worf, or observation-lounge)\\n2. Detailed reasoning for the selection\\n3. Priority level assessment\\n4. Recommended UI layout\\n5. Strategic approach to solving the problem\\n6. Any workflow enhancements needed for the bilateral sync system\"\n    }\n  ],\n  \"max_tokens\": {{ $json.llmConfig.maxTokens }},\n  \"temperature\": {{ $json.llmConfig.temperature }},\n  \"stream\": false\n}",
          "options": {}
        },
        "id": "chatgpt5-analysis",
        "name": "ChatGPT 5 Enhanced Analysis",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          720,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Enhanced Crew Response Generator with Bilateral Sync Integration\nconst aiResponse = $input.first().json.choices[0].message.content.toLowerCase();\nconst originalRequest = $('Intelligent LLM Selector').first().json;\n\n// Extract crew member recommendation\nlet crewMember = 'captain-picard'; // default\nif (aiResponse.includes('data')) crewMember = 'lieutenant-data';\nelse if (aiResponse.includes('troi')) crewMember = 'counselor-troi';\nelse if (aiResponse.includes('scott')) crewMember = 'chief-engineer-scott';\nelse if (aiResponse.includes('spock')) crewMember = 'commander-spock';\nelse if (aiResponse.includes('worf')) crewMember = 'lieutenant-worf';\nelse if (aiResponse.includes('observation')) crewMember = 'observation-lounge';\n\n// Extract UI layout recommendation\nlet uiLayout = 'standard-lcars'; // default\nif (aiResponse.includes('technical') || aiResponse.includes('engineering')) uiLayout = 'technical-analysis';\nelse if (aiResponse.includes('strategic') || aiResponse.includes('command')) uiLayout = 'strategic-command';\nelse if (aiResponse.includes('security') || aiResponse.includes('tactical')) uiLayout = 'security-tactical';\n\n// Extract priority level\nlet priority = 'normal'; // default\nif (aiResponse.includes('critical') || aiResponse.includes('urgent')) priority = 'critical';\nelse if (aiResponse.includes('high')) priority = 'high';\nelse if (aiResponse.includes('low')) priority = 'low';\n\n// Prepare enhanced crew request with bilateral sync context\nconst crewRequest = {\n  query: originalRequest.query,\n  context: originalRequest.context || 'general',\n  userRole: originalRequest.userRole || 'developer',\n  urgency: originalRequest.urgency || 'normal',\n  complexity: originalRequest.complexity || 'medium',\n  selectedCrew: crewMember,\n  aiSelection: aiResponse,\n  llmInfo: {\n    provider: originalRequest.selectedLLM,\n    model: originalRequest.llmConfig.model,\n    maxTokens: originalRequest.llmConfig.maxTokens\n  },\n  uiRecommendation: {\n    layout: uiLayout,\n    priority: priority,\n    reasoning: aiResponse\n  },\n  bilateralSync: {\n    ...originalRequest.bilateralSync,\n    lastSync: new Date().toISOString(),\n    syncStatus: 'pending'\n  }\n};\n\nreturn crewRequest;"
        },
        "id": "enhanced-crew-generator",
        "name": "Enhanced Crew Response Generator",
        "type": "n8n-nodes-base.code",
        "typeCode": 2,
        "position": [
          960,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Bilateral Sync Integration and Workflow Enhancement Analyzer\nconst crewRequest = $input.first().json;\nconst { selectedCrew, uiRecommendation, bilateralSync, llmInfo } = crewRequest;\n\n// Analyze if workflow enhancements are needed\nconst workflowEnhancements = [];\n\nif (llmInfo.provider === 'chatgpt5') {\n  workflowEnhancements.push({\n    type: 'llm_upgrade',\n    priority: 'high',\n    description: 'Upgrade workflow to leverage ChatGPT 5 advanced features',\n    recommendations: [\n      'Enable function calling for crew selection',\n      'Implement advanced error handling',\n      'Add performance monitoring',\n      'Enable real-time sync optimization'\n    ]\n  });\n}\n\nif (uiRecommendation.priority === 'critical' || uiRecommendation.priority === 'high') {\n  workflowEnhancements.push({\n    type: 'ui_optimization',\n    priority: uiRecommendation.priority,\n    description: 'Optimize UI layout for high-priority requests',\n    recommendations: [\n      'Implement priority-based UI rendering',\n      'Add real-time status updates',\n      'Enable emergency mode for critical requests',\n      'Optimize response time for high-priority operations'\n    ]\n  });\n}\n\nif (bilateralSync.enabled) {\n  workflowEnhancements.push({\n    type: 'sync_optimization',\n    priority: 'medium',\n    description: 'Optimize bilateral sync for enhanced performance',\n    recommendations: [\n      'Implement smart conflict resolution',\n      'Add sync performance metrics',\n      'Enable predictive sync scheduling',\n      'Optimize file watching efficiency'\n    ]\n  });\n}\n\n// Prepare enhanced response with workflow recommendations\nconst enhancedResponse = {\n  success: true,\n  selectedCrew: crewRequest.selectedCrew,\n  aiSelection: crewRequest.aiSelection,\n  llmInfo: crewRequest.llmInfo,\n  uiRecommendation: crewRequest.uiRecommendation,\n  bilateralSync: {\n    ...crewRequest.bilateralSync,\n    syncStatus: 'optimized',\n    lastOptimization: new Date().toISOString()\n  },\n  workflowEnhancements,\n  timestamp: new Date().toISOString(),\n  systemHealth: {\n    status: 'optimal',\n    recommendations: workflowEnhancements.length > 0 ? 'Workflow enhancements available' : 'System operating optimally',\n    nextSync: new Date(Date.now() + 60000).toISOString() // 1 minute from now\n  }\n};\n\nreturn enhancedResponse;"
        },
        "id": "bilateral-sync-analyzer",
        "name": "Bilateral Sync & Workflow Analyzer",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1200,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ $json }}",
          "options": {}
        },
        "id": "enhanced-response-formatter",
        "name": "Enhanced Response Formatter",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1440,
          300
        ]
      }
    ],
    "connections": {
      "Enhanced ChatGPT 5 Prompt Webhook": {
        "main": [
          [
            {
              "node": "Intelligent LLM Selector",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Intelligent LLM Selector": {
        "main": [
          [
            {
              "node": "ChatGPT 5 Enhanced Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "ChatGPT 5 Enhanced Analysis": {
        "main": [
          [
            {
              "node": "Enhanced Crew Response Generator",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Enhanced Crew Response Generator": {
        "main": [
          [
            {
              "node": "Bilateral Sync & Workflow Analyzer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Bilateral Sync & Workflow Analyzer": {
        "main": [
          [
            {
              "node": "Enhanced Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "tags": [
      {
        "createdAt": "2025-01-10T00:00:00.000Z",
        "updatedAt": "2025-01-10T00:00:00.000Z",
        "id": "chatgpt5-enhanced",
        "name": "ChatGPT 5 Enhanced"
      },
      {
        "createdAt": "2025-01-10T00:00:00.000Z",
        "updatedAt": "2025-01-10T00:00:00.000Z",
        "id": "bilateral-sync",
        "name": "Bilateral Sync"
      },
      {
        "createdAt": "2025-01-10T00:00:00.000Z",
        "updatedAt": "2025-01-10T00:00:00.000Z",
        "id": "crew-coordination",
        "name": "Crew Coordination"
      }
    ],
    "triggerCount": 0,
    "updatedAt": "2025-01-10T00:00:00.000Z",
    "versionId": "1"
  },
  {
    "id": "7fK5hkE6yrsQZfqs",
    "name": "AlexAI Complete Crew Coordination Workflow",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "request-analyzer",
        "name": "Request Analyzer",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          100,
          300
        ],
        "webhookId": "crew-request-webhook"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an AI crew coordinator for the AlexAI Star Trek system. Analyze the user request and select the most appropriate Star Trek crew member to respond. Consider: task type, complexity, emotional context, and technical depth. Return ONLY the crew member name: captain-picard, lieutenant-data, counselor-troi, chief-engineer-scott, commander-spock, lieutenant-worf, or observation-lounge for group meetings.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"User Query: {{ $json.query }}\\nUser Context: {{ $json.context || 'general' }}\\nUser Role: {{ $json.userRole || 'developer' }}\\nUrgency: {{ $json.urgency || 'normal' }}\\nComplexity: {{ $json.complexity || 'medium' }}\"\n    }\n  ],\n  \"max_tokens\": 50,\n  \"temperature\": 0.3\n}",
          "options": {}
        },
        "id": "crew-selector",
        "name": "Crew Selector (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          350,
          300
        ]
      },
      {
        "parameters": {
          "rules": {
            "rules": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "captain-picard",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "captain-picard",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 0
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-data",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-data",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 1
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "counselor-troi",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "counselor-troi",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 2
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "chief-engineer-scott",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "chief-engineer-scott",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 3
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "commander-spock",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "commander-spock",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 4
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-worf",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-worf",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 5
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "observation-lounge",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "observation-lounge",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 6
              }
            ]
          },
          "fallbackOutput": 0,
          "options": {}
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3,
        "position": [
          600,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/captain-picard",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "captain-picard-response",
        "name": "Captain Picard Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          100
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/lieutenant-data",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "lieutenant-data-response",
        "name": "Lieutenant Data Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          200
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/counselor-troi",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "counselor-troi-response",
        "name": "Counselor Troi Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/chief-engineer-scott",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "chief-engineer-scott-response",
        "name": "Chief Engineer Scott Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          400
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/commander-spock",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "commander-spock-response",
        "name": "Commander Spock Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          500
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/lieutenant-worf",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "lieutenant-worf-response",
        "name": "Lieutenant Worf Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          600
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/observation-lounge",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"meetingType\": \"project-status\",\n  \"projectContext\": {\n    \"projectId\": \"alexai-platform\",\n    \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n    \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }}\n  }\n}",
          "options": {}
        },
        "id": "observation-lounge-response",
        "name": "Observation Lounge Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          700
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"crewMember\": {{ JSON.stringify($('Crew Selector (OpenRouter)').item.json.choices[0].message.content) }},\n  \"response\": {{ $json }},\n  \"timestamp\": {{ JSON.stringify(new Date().toISOString()) }},\n  \"requestId\": {{ JSON.stringify($('Request Analyzer').item.json.requestId || Math.random().toString(36).substr(2, 9)) }}\n}",
          "options": {}
        },
        "id": "response-handler",
        "name": "Response Handler",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1100,
          400
        ]
      },
      {
        "parameters": {
          "jsCode": "// Local Test Data Generator for n8n UI Testing\n// This allows testing the workflow directly in the n8n interface\n\nconst testScenarios = [\n  {\n    query: \"What should I work on today?\",\n    context: \"daily-planning\",\n    userRole: \"developer\",\n    urgency: \"normal\",\n    complexity: \"medium\"\n  },\n  {\n    query: \"How do we optimize this React component?\",\n    context: \"performance-optimization\",\n    userRole: \"senior-developer\",\n    urgency: \"high\",\n    complexity: \"high\"\n  },\n  {\n    query: \"I'm feeling overwhelmed with this project\",\n    context: \"emotional-support\",\n    userRole: \"junior-developer\",\n    urgency: \"normal\",\n    complexity: \"low\"\n  },\n  {\n    query: \"We need to secure our API endpoints\",\n    context: \"security-review\",\n    userRole: \"security-engineer\",\n    urgency: \"critical\",\n    complexity: \"high\"\n  },\n  {\n    query: \"The deployment pipeline is failing\",\n    context: \"infrastructure-issue\",\n    userRole: \"devops-engineer\",\n    urgency: \"critical\",\n    complexity: \"high\"\n  },\n  {\n    query: \"Let's review the project status\",\n    context: \"project-review\",\n    userRole: \"project-manager\",\n    urgency: \"normal\",\n    complexity: \"medium\"\n  }\n];\n\n// Select a random test scenario or use the first one\nconst selectedScenario = testScenarios[Math.floor(Math.random() * testScenarios.length)];\n\n// Add request ID and timestamp\nselectedScenario.requestId = 'test-' + Math.random().toString(36).substr(2, 9);\nselectedScenario.timestamp = new Date().toISOString();\nselectedScenario.testMode = true;\n\nreturn selectedScenario;"
        },
        "id": "local-test-generator",
        "name": "Local Test Generator",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          100,
          100
        ]
      }
    ],
    "connections": {
      "Request Analyzer": {
        "main": [
          [
            {
              "node": "Crew Selector (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Selector (OpenRouter)": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Captain Picard Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Data Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Counselor Troi Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Chief Engineer Scott Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Commander Spock Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Worf Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Observation Lounge Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Captain Picard Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Data Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Counselor Troi Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Chief Engineer Scott Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Commander Spock Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Worf Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Observation Lounge Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Local Test Generator": {
        "main": [
          [
            {
              "node": "Crew Selector (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "2b7a5f9e-c411-4240-810a-78c9d5c8cd9f",
    "createdAt": "2025-08-10T02:17:24.365Z",
    "updatedAt": "2025-08-10T21:42:38.165Z"
  },
  {
    "name": "AlexAI Complete Crew Coordination Workflow",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "request-analyzer",
        "name": "Request Analyzer",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          100,
          300
        ],
        "webhookId": "crew-request-webhook"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an AI crew coordinator for the AlexAI Star Trek system. Analyze the user request and select the most appropriate Star Trek crew member to respond. Consider: task type, complexity, emotional context, and technical depth. Return ONLY the crew member name: captain-picard, lieutenant-data, counselor-troi, chief-engineer-scott, commander-spock, lieutenant-worf, or observation-lounge for group meetings.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"User Query: {{ $json.query }}\\nUser Context: {{ $json.context || 'general' }}\\nUser Role: {{ $json.userRole || 'developer' }}\\nUrgency: {{ $json.urgency || 'normal' }}\\nComplexity: {{ $json.complexity || 'medium' }}\"\n    }\n  ],\n  \"max_tokens\": 50,\n  \"temperature\": 0.3\n}",
          "options": {}
        },
        "id": "crew-selector",
        "name": "Crew Selector (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          350,
          300
        ]
      },
      {
        "parameters": {
          "rules": {
            "rules": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "captain-picard",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "captain-picard",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 0
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-data",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-data",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 1
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "counselor-troi",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "counselor-troi",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 2
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "chief-engineer-scott",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "chief-engineer-scott",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 3
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "commander-spock",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "commander-spock",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 4
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-worf",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-worf",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 5
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "observation-lounge",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "observation-lounge",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 6
              }
            ]
          },
          "fallbackOutput": 0,
          "options": {}
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3,
        "position": [
          600,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/captain-picard",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "captain-picard-response",
        "name": "Captain Picard Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          100
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/lieutenant-data",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "lieutenant-data-response",
        "name": "Lieutenant Data Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          200
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/counselor-troi",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "counselor-troi-response",
        "name": "Counselor Troi Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/chief-engineer-scott",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "chief-engineer-scott-response",
        "name": "Chief Engineer Scott Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          400
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/commander-spock",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "commander-spock-response",
        "name": "Commander Spock Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          500
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/lieutenant-worf",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n  \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }},\n  \"userRole\": {{ JSON.stringify($('Request Analyzer').item.json.userRole || 'developer') }},\n  \"urgency\": {{ JSON.stringify($('Request Analyzer').item.json.urgency || 'normal') }}\n}",
          "options": {}
        },
        "id": "lieutenant-worf-response",
        "name": "Lieutenant Worf Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          600
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/observation-lounge",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"meetingType\": \"project-status\",\n  \"projectContext\": {\n    \"projectId\": \"alexai-platform\",\n    \"query\": {{ JSON.stringify($('Request Analyzer').item.json.query) }},\n    \"context\": {{ JSON.stringify($('Request Analyzer').item.json.context || 'general') }}\n  }\n}",
          "options": {}
        },
        "id": "observation-lounge-response",
        "name": "Observation Lounge Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          700
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"crewMember\": {{ JSON.stringify($('Crew Selector (OpenRouter)').item.json.choices[0].message.content) }},\n  \"response\": {{ $json }},\n  \"timestamp\": {{ JSON.stringify(new Date().toISOString()) }},\n  \"requestId\": {{ JSON.stringify($('Request Analyzer').item.json.requestId || Math.random().toString(36).substr(2, 9)) }}\n}",
          "options": {}
        },
        "id": "response-handler",
        "name": "Response Handler",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1100,
          400
        ]
      },
      {
        "parameters": {
          "jsCode": "// Local Test Data Generator for n8n UI Testing\n// This allows testing the workflow directly in the n8n interface\n\nconst testScenarios = [\n  {\n    query: \"What should I work on today?\",\n    context: \"daily-planning\",\n    userRole: \"developer\",\n    urgency: \"normal\",\n    complexity: \"medium\"\n  },\n  {\n    query: \"How do we optimize this React component?\",\n    context: \"performance-optimization\",\n    userRole: \"senior-developer\",\n    urgency: \"high\",\n    complexity: \"high\"\n  },\n  {\n    query: \"I'm feeling overwhelmed with this project\",\n    context: \"emotional-support\",\n    userRole: \"junior-developer\",\n    urgency: \"normal\",\n    complexity: \"low\"\n  },\n  {\n    query: \"We need to secure our API endpoints\",\n    context: \"security-review\",\n    userRole: \"security-engineer\",\n    urgency: \"critical\",\n    complexity: \"high\"\n  },\n  {\n    query: \"The deployment pipeline is failing\",\n    context: \"infrastructure-issue\",\n    userRole: \"devops-engineer\",\n    urgency: \"critical\",\n    complexity: \"high\"\n  },\n  {\n    query: \"Let's review the project status\",\n    context: \"project-review\",\n    userRole: \"project-manager\",\n    urgency: \"normal\",\n    complexity: \"medium\"\n  }\n];\n\n// Select a random test scenario or use the first one\nconst selectedScenario = testScenarios[Math.floor(Math.random() * testScenarios.length)];\n\n// Add request ID and timestamp\nselectedScenario.requestId = 'test-' + Math.random().toString(36).substr(2, 9);\nselectedScenario.timestamp = new Date().toISOString();\nselectedScenario.testMode = true;\n\nreturn selectedScenario;"
        },
        "id": "local-test-generator",
        "name": "Local Test Generator",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          100,
          100
        ]
      }
    ],
    "connections": {
      "Request Analyzer": {
        "main": [
          [
            {
              "node": "Crew Selector (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Selector (OpenRouter)": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Captain Picard Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Data Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Counselor Troi Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Chief Engineer Scott Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Commander Spock Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Worf Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Observation Lounge Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Captain Picard Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Data Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Counselor Troi Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Chief Engineer Scott Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Commander Spock Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Worf Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Observation Lounge Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Local Test Generator": {
        "main": [
          [
            {
              "node": "Crew Selector (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "id": "7fK5hkE6yrsQZfqs"
  },
  {
    "id": "ilqi01ug4rPx2fDO",
    "name": "AlexAI Crew Coordination Workflow",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "request-analyzer",
        "name": "Request Analyzer",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          100,
          100
        ],
        "webhookId": "crew-request-webhook"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "anthropic/claude-3.5-sonnet"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are an AI crew coordinator for the AlexAI Star Trek system. Analyze the user request and select the most appropriate Star Trek crew member to respond. Consider: task type, complexity, emotional context, and technical depth. Return only the crew member name: captain-picard, lieutenant-data, counselor-troi, chief-engineer-scott, commander-spock, lieutenant-worf, or observation-lounge for group meetings.\"}, {\"role\": \"user\", \"content\": \"User Query: {{ $json.query }}\\nUser Context: {{ $json.context }}\\nUser Role: {{ $json.userRole }}\"}]"
              }
            ]
          },
          "options": {}
        },
        "id": "crew-selector",
        "name": "Crew Selector (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          300,
          100
        ]
      },
      {
        "parameters": {
          "rules": {
            "rules": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "captain-picard",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "captain-picard",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 0
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-data",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-data",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 1
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "observation-lounge",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "observation-lounge",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 2
              }
            ]
          },
          "options": {}
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 2,
        "position": [
          500,
          100
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL }}/api/crew/captain-picard",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "={{ $('Request Analyzer').item.json.query }}"
              },
              {
                "name": "context",
                "value": "={{ $('Request Analyzer').item.json.context }}"
              }
            ]
          },
          "options": {}
        },
        "id": "captain-picard-response",
        "name": "Captain Picard Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          700,
          50
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL }}/api/crew/lieutenant-data",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "={{ $('Request Analyzer').item.json.query }}"
              },
              {
                "name": "context",
                "value": "={{ $('Request Analyzer').item.json.context }}"
              },
              {
                "name": "userRole",
                "value": "={{ $('Request Analyzer').item.json.userRole }}"
              }
            ]
          },
          "options": {}
        },
        "id": "lieutenant-data-response",
        "name": "Lieutenant Data Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          700,
          150
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL }}/api/crew/observation-lounge",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "meetingType",
                "value": "project-status"
              },
              {
                "name": "projectContext",
                "value": "={\"projectId\": \"alexai-platform\"}"
              }
            ]
          },
          "options": {}
        },
        "id": "observation-lounge-response",
        "name": "Observation Lounge Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          700,
          250
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ $json }}",
          "options": {}
        },
        "id": "response-handler",
        "name": "Response Handler",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          900,
          150
        ]
      }
    ],
    "connections": {
      "Request Analyzer": {
        "main": [
          [
            {
              "node": "Crew Selector (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Selector (OpenRouter)": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Captain Picard Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Data Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Observation Lounge Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Captain Picard Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Data Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Observation Lounge Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "b74f7d57-9262-4c7f-8456-9ab4e7eecf40",
    "createdAt": "2025-08-10T21:37:48.496Z",
    "updatedAt": "2025-08-10T21:42:38.327Z"
  },
  {
    "name": "AlexAI Crew Coordination Workflow",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "request-analyzer",
        "name": "Request Analyzer",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          100,
          100
        ],
        "webhookId": "crew-request-webhook"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "anthropic/claude-3.5-sonnet"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are an AI crew coordinator for the AlexAI Star Trek system. Analyze the user request and select the most appropriate Star Trek crew member to respond. Consider: task type, complexity, emotional context, and technical depth. Return only the crew member name: captain-picard, lieutenant-data, counselor-troi, chief-engineer-scott, commander-spock, lieutenant-worf, or observation-lounge for group meetings.\"}, {\"role\": \"user\", \"content\": \"User Query: {{ $json.query }}\\nUser Context: {{ $json.context }}\\nUser Role: {{ $json.userRole }}\"}]"
              }
            ]
          },
          "options": {}
        },
        "id": "crew-selector",
        "name": "Crew Selector (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          300,
          100
        ]
      },
      {
        "parameters": {
          "rules": {
            "rules": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "captain-picard",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "captain-picard",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 0
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-data",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-data",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 1
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "observation-lounge",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "observation-lounge",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 2
              }
            ]
          },
          "options": {}
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 2,
        "position": [
          500,
          100
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL }}/api/crew/captain-picard",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "={{ $('Request Analyzer').item.json.query }}"
              },
              {
                "name": "context",
                "value": "={{ $('Request Analyzer').item.json.context }}"
              }
            ]
          },
          "options": {}
        },
        "id": "captain-picard-response",
        "name": "Captain Picard Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          700,
          50
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL }}/api/crew/lieutenant-data",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "={{ $('Request Analyzer').item.json.query }}"
              },
              {
                "name": "context",
                "value": "={{ $('Request Analyzer').item.json.context }}"
              },
              {
                "name": "userRole",
                "value": "={{ $('Request Analyzer').item.json.userRole }}"
              }
            ]
          },
          "options": {}
        },
        "id": "lieutenant-data-response",
        "name": "Lieutenant Data Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          700,
          150
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL }}/api/crew/observation-lounge",
          "authentication": "none",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "meetingType",
                "value": "project-status"
              },
              {
                "name": "projectContext",
                "value": "={\"projectId\": \"alexai-platform\"}"
              }
            ]
          },
          "options": {}
        },
        "id": "observation-lounge-response",
        "name": "Observation Lounge Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          700,
          250
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ $json }}",
          "options": {}
        },
        "id": "response-handler",
        "name": "Response Handler",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          900,
          150
        ]
      }
    ],
    "connections": {
      "Request Analyzer": {
        "main": [
          [
            {
              "node": "Crew Selector (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Selector (OpenRouter)": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Captain Picard Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Data Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Observation Lounge Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Captain Picard Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Data Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Observation Lounge Response": {
        "main": [
          [
            {
              "node": "Response Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "id": "ilqi01ug4rPx2fDO"
  },
  {
    "id": "fIzo0tIHtcQcgF2v",
    "name": "AlexAI Enhanced AI Insights Workflow",
    "nodes": [
      {
        "parameters": {
          "path": "ai-insights-enhanced",
          "options": {}
        },
        "id": "enhanced-ai-webhook",
        "name": "Enhanced AI Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "webhookId": "enhanced-ai-insights"
      },
      {
        "parameters": {
          "jsCode": "// Enhanced AI Insights Processor\n// Incorporates cutting-edge AI development patterns\nconst processAIInsights = () => {\n  const input = $input.all()[0].json;\n  \n  // Extract startup idea and enhancement request\n  const startupIdea = input.startupIdea || input.query || '';\n  const enhancementType = input.enhancementType || 'comprehensive';\n  const aiDeveloperInsights = input.aiDeveloperInsights || [];\n  \n  // Apply cutting-edge AI development insights\n  const enhancedAnalysis = {\n    originalIdea: startupIdea,\n    enhancementType,\n    \n    // Incorporate insights from AI development leaders\n    aiEnhancements: {\n      // Pattern 1: AI-First Development Approach\n      aiFirstDesign: analyzeAIFirstOpportunities(startupIdea),\n      \n      // Pattern 2: Automation-Driven Scaling\n      automationPotential: identifyAutomationOpportunities(startupIdea),\n      \n      // Pattern 3: Multi-Modal AI Integration\n      multiModalCapabilities: assessMultiModalIntegration(startupIdea),\n      \n      // Pattern 4: Revenue Optimization through AI\n      aiRevenueOptimization: generateAIRevenueStrategies(startupIdea),\n      \n      // Pattern 5: Community-Driven Growth\n      communityGrowthHacks: designCommunityGrowthStrategy(startupIdea),\n      \n      // Pattern 6: No-Code/Low-Code Integration\n      noCodeOpportunities: identifyNoCodeIntegrations(startupIdea)\n    },\n    \n    // Enhanced technical recommendations\n    technicalEnhancements: {\n      architecturePatterns: getModernArchitecturePatterns(startupIdea),\n      scalingStrategies: getScalingBestPractices(startupIdea),\n      performanceOptimization: getPerformancePatterns(startupIdea),\n      securityBestPractices: getSecurityPatterns(startupIdea)\n    },\n    \n    // Market positioning enhancements\n    marketingEnhancements: {\n      contentMarketingStrategy: generateContentStrategy(startupIdea),\n      socialProofMechanisms: designSocialProofSystems(startupIdea),\n      viralGrowthPatterns: identifyViralGrowthOpportunities(startupIdea),\n      communityBuildingApproach: createCommunityStrategy(startupIdea)\n    },\n    \n    // Revenue model enhancements\n    revenueEnhancements: {\n      pricingPsychology: applyPricingPsychology(startupIdea),\n      upsellStrategies: generateUpsellOpportunities(startupIdea),\n      retentionMechanisms: createRetentionStrategies(startupIdea),\n      ltvaximization: optimizeCustomerLifetimeValue(startupIdea)\n    },\n    \n    requestId: `enhanced_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    timestamp: new Date().toISOString(),\n    processingNode: 'enhanced-ai-insights-processor'\n  };\n  \n  return [{ json: enhancedAnalysis }];\n};\n\n// AI-First Development Analysis\nfunction analyzeAIFirstOpportunities(idea) {\n  const ideaLower = idea.toLowerCase();\n  const opportunities = [];\n  \n  if (!ideaLower.includes('ai') && !ideaLower.includes('automation')) {\n    opportunities.push('Add AI-powered personalization engine');\n    opportunities.push('Implement intelligent content generation');\n    opportunities.push('Create predictive analytics dashboard');\n  }\n  \n  opportunities.push('AI-driven user onboarding optimization');\n  opportunities.push('Intelligent feature recommendation system');\n  opportunities.push('Automated customer support with AI');\n  opportunities.push('Machine learning-based pricing optimization');\n  \n  return {\n    score: opportunities.length > 4 ? 'high-potential' : 'medium-potential',\n    opportunities,\n    implementation: 'Start with one AI feature, expand based on user feedback',\n    timeline: '2-4 weeks for first AI integration'\n  };\n}\n\n// Automation Potential Assessment\nfunction identifyAutomationOpportunities(idea) {\n  const automationAreas = [\n    'User onboarding and setup',\n    'Content creation and curation', \n    'Customer support and FAQ responses',\n    'Marketing email sequences',\n    'Payment processing and invoicing',\n    'Performance monitoring and alerting',\n    'Data backup and security scans',\n    'Social media posting and engagement'\n  ];\n  \n  return {\n    automationScore: 'high',\n    opportunities: automationAreas,\n    priorityAreas: automationAreas.slice(0, 4),\n    toolRecommendations: ['n8n workflows', 'Zapier integrations', 'Custom API automation'],\n    expectedEfficiency: '60-80% reduction in manual tasks'\n  };\n}\n\n// Multi-Modal AI Integration\nfunction assessMultiModalIntegration(idea) {\n  const modalities = {\n    text: ['AI content generation', 'Intelligent search', 'Automated summarization'],\n    voice: ['Voice commands', 'Audio content creation', 'Voice-to-text processing'],\n    visual: ['Image recognition', 'Video analysis', 'Visual content generation'],\n    data: ['Pattern recognition', 'Predictive analytics', 'Anomaly detection']\n  };\n  \n  return {\n    applicableModalities: Object.keys(modalities),\n    integrationOpportunities: modalities,\n    developmentApproach: 'Start with text AI, expand to other modalities',\n    competitiveAdvantage: 'Multi-modal experiences create stronger user engagement'\n  };\n}\n\n// AI Revenue Optimization\nfunction generateAIRevenueStrategies(idea) {\n  return {\n    dynamicPricing: 'AI-powered pricing optimization based on demand and user behavior',\n    personalizedUpsells: 'Machine learning-driven feature recommendations',\n    churnPrediction: 'AI models to identify and prevent customer churn',\n    valueOptimization: 'Intelligent feature usage analysis to maximize perceived value',\n    marketingOptimization: 'AI-driven campaign optimization and targeting',\n    implementationOrder: ['churnPrediction', 'personalizedUpsells', 'dynamicPricing', 'valueOptimization']\n  };\n}\n\n// Community Growth Strategy\nfunction designCommunityGrowthStrategy(idea) {\n  return {\n    contentStrategy: 'Developer-focused educational content and tutorials',\n    communityPlatforms: ['Discord community', 'GitHub discussions', 'YouTube channel', 'Twitter engagement'],\n    thoughtLeadership: 'Share insights about AI development and startup building',\n    userGeneratedContent: 'Encourage community members to share their builds and successes',\n    partnershipOpportunities: 'Collaborate with other AI developers and content creators',\n    engagementMechanics: ['Weekly challenges', 'Community showcases', 'Expert AMAs', 'Collaborative projects']\n  };\n}\n\n// No-Code/Low-Code Integration\nfunction identifyNoCodeIntegrations(idea) {\n  return {\n    platforms: ['n8n', 'Zapier', 'Make.com', 'Bubble', 'Webflow'],\n    integrationOpportunities: [\n      'Workflow automation templates',\n      'Pre-built integration connectors', \n      'Drag-and-drop interface builders',\n      'No-code AI model deployment',\n      'Visual workflow designers'\n    ],\n    marketAdvantage: 'Enable non-technical users to leverage advanced AI capabilities',\n    developmentStrategy: 'Build API-first, then create no-code wrappers'\n  };\n}\n\n// Modern Architecture Patterns\nfunction getModernArchitecturePatterns(idea) {\n  return {\n    microservices: 'Containerized services for scalability',\n    serverless: 'Function-based architecture for cost optimization',\n    edgeComputing: 'CDN and edge functions for performance',\n    eventDriven: 'Webhook and event-based communication',\n    apiFirst: 'RESTful and GraphQL API design',\n    recommendedStack: ['Next.js 15', 'Supabase', 'Vercel', 'Docker', 'n8n']\n  };\n}\n\n// Scaling Best Practices\nfunction getScalingBestPractices(idea) {\n  return {\n    horizontalScaling: 'Load balancers and auto-scaling groups',\n    databaseOptimization: 'Read replicas and connection pooling',\n    caching: 'Redis for session management and API caching',\n    monitoring: 'Comprehensive observability and alerting',\n    cicd: 'Automated testing and deployment pipelines',\n    costOptimization: 'Resource usage monitoring and optimization'\n  };\n}\n\n// Performance Optimization\nfunction getPerformancePatterns(idea) {\n  return {\n    frontendOptimization: ['Code splitting', 'Lazy loading', 'Image optimization'],\n    backendOptimization: ['Database indexing', 'Query optimization', 'Caching layers'],\n    networkOptimization: ['CDN usage', 'Compression', 'HTTP/2 implementation'],\n    userExperience: ['Progressive loading', 'Skeleton screens', 'Optimistic updates']\n  };\n}\n\n// Security Best Practices\nfunction getSecurityPatterns(idea) {\n  return {\n    authentication: 'Multi-factor authentication and OAuth integration',\n    authorization: 'Role-based access control and API rate limiting',\n    dataProtection: 'Encryption at rest and in transit',\n    compliance: 'GDPR, CCPA, and SOC 2 compliance frameworks',\n    monitoring: 'Security event logging and anomaly detection'\n  };\n}\n\n// Content Marketing Strategy\nfunction generateContentStrategy(idea) {\n  return {\n    contentTypes: ['Technical tutorials', 'Case studies', 'Developer guides', 'AI insights'],\n    platforms: ['Blog', 'YouTube', 'Twitter', 'LinkedIn', 'GitHub'],\n    frequency: 'Weekly technical content, daily social media engagement',\n    seoStrategy: 'Target long-tail keywords in AI and development space',\n    communityBuilding: 'Engage with AI developer community and thought leaders'\n  };\n}\n\n// Social Proof Mechanisms\nfunction designSocialProofSystems(idea) {\n  return {\n    testimonials: 'Customer success stories and case studies',\n    metrics: 'Usage statistics and performance benchmarks',\n    certifications: 'Security and compliance certifications',\n    partnerships: 'Integration partnerships with major platforms',\n    communitySize: 'Active user base and community engagement metrics'\n  };\n}\n\n// Viral Growth Opportunities\nfunction identifyViralGrowthOpportunities(idea) {\n  return {\n    shareableFeatures: 'Public project galleries and showcase features',\n    referralPrograms: 'Incentivized referral systems with mutual benefits',\n    contentVirality: 'Shareable results, achievements, and success metrics',\n    socialIntegration: 'Easy sharing to social platforms with branded content',\n    communityFeatures: 'Collaborative projects and team challenges'\n  };\n}\n\n// Community Building Strategy\nfunction createCommunityStrategy(idea) {\n  return {\n    platforms: ['Discord server', 'GitHub community', 'YouTube channel'],\n    engagement: ['Weekly office hours', 'Community challenges', 'User showcases'],\n    content: ['Tutorials', 'Best practices', 'Live coding sessions'],\n    moderation: 'Community guidelines and active moderation team',\n    growth: 'Influencer partnerships and cross-promotion'\n  };\n}\n\n// Pricing Psychology\nfunction applyPricingPsychology(idea) {\n  return {\n    anchoring: 'High-value tier to make medium tier seem reasonable',\n    scarcity: 'Limited-time offers and exclusive features',\n    socialProof: 'Popular plan highlighting and customer counts',\n    freemium: 'Free tier with clear upgrade path and value demonstration',\n    bundling: 'Feature packages that increase perceived value'\n  };\n}\n\n// Upsell Strategies\nfunction generateUpsellOpportunities(idea) {\n  return {\n    featureGating: 'Advanced features in higher tiers',\n    usageLimits: 'Capacity upgrades for growing usage',\n    integrations: 'Premium integrations and enterprise connectors',\n    support: 'Priority support and dedicated success managers',\n    customization: 'White-label options and custom branding'\n  };\n}\n\n// Retention Strategies\nfunction createRetentionStrategies(idea) {\n  return {\n    onboarding: 'Comprehensive onboarding with success milestones',\n    engagement: 'Regular feature updates and improvement communications',\n    support: 'Proactive customer success and health monitoring',\n    community: 'User community and peer learning opportunities',\n    value: 'Regular value demonstration and usage insights'\n  };\n}\n\n// Customer Lifetime Value Optimization\nfunction optimizeCustomerLifetimeValue(idea) {\n  return {\n    expansion: 'Natural upgrade paths based on usage growth',\n    retention: 'Churn prediction and prevention strategies',\n    advocacy: 'Customer advocacy programs and referral incentives',\n    partnership: 'Integration partnerships that lock in value',\n    innovation: 'Continuous feature development based on customer feedback'\n  };\n}\n\nreturn processAIInsights();"
        },
        "id": "enhanced-ai-insights-processor",
        "name": "Enhanced AI Insights Processor",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          440,
          300
        ],
        "notes": "Processes startup ideas with cutting-edge AI development insights"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "method": "POST",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "httpHeaderAuth": {
            "name": "Authorization",
            "value": "Bearer {{ $vars.OPENROUTER_API_KEY }}"
          },
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.OPENROUTER_API_KEY }}"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://alexai-star-trek-agile.vercel.app"
              },
              {
                "name": "X-Title",
                "value": "AlexAI Enhanced AI Insights Engine"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an advanced AI development insights engine that synthesizes cutting-edge patterns from industry leaders. Analyze the enhanced startup analysis and provide strategic recommendations based on the latest AI development trends, revenue optimization strategies, and community building approaches. Focus on actionable insights that can be implemented within 30-90 days.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Enhanced Analysis: {{ JSON.stringify($json.aiEnhancements) }}\\n\\nTechnical Enhancements: {{ JSON.stringify($json.technicalEnhancements) }}\\n\\nMarketing Enhancements: {{ JSON.stringify($json.marketingEnhancements) }}\\n\\nRevenue Enhancements: {{ JSON.stringify($json.revenueEnhancements) }}\\n\\nPlease provide strategic recommendations for implementation prioritization and execution.\"\n    }\n  ],\n  \"max_tokens\": 1000,\n  \"temperature\": 0.3\n}",
          "options": {
            "responseTimeout": 45000
          }
        },
        "id": "ai-insights-strategic-analysis",
        "name": "AI Insights Strategic Analysis",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          640,
          300
        ],
        "notes": "Advanced strategic analysis using AI insights"
      },
      {
        "parameters": {
          "jsCode": "// Enhanced Startup Creation Orchestrator\n// Coordinates multi-project creation with AI insights\nconst orchestrateStartupCreation = () => {\n  const enhancedAnalysis = $input.all()[0].json;\n  const strategicRecommendations = $input.all()[1].json.choices[0].message.content;\n  \n  // Create comprehensive startup creation plan\n  const creationPlan = {\n    projectId: `startup_${Date.now()}`,\n    enhancedAnalysis,\n    strategicInsights: parseStrategicRecommendations(strategicRecommendations),\n    \n    // Multi-project coordination\n    projectCoordination: {\n      isolationStrategy: 'client-specific-containers',\n      sharedResources: ['ai-crew', 'infrastructure', 'development-framework'],\n      resourceAllocation: calculateResourceAllocation(enhancedAnalysis),\n      timeline: generateEnhancedTimeline(enhancedAnalysis)\n    },\n    \n    // Revenue generation setup\n    revenueSetup: {\n      paymentIntegration: 'stripe-multi-tenant',\n      subscriptionManagement: 'automated-billing-cycles',\n      leadIsolation: 'project-specific-crm',\n      conversionOptimization: 'ai-driven-funnel-optimization'\n    },\n    \n    // AI-enhanced features\n    aiFeatures: {\n      personalizeation: 'user-behavior-driven-ui',\n      automation: 'workflow-optimization-engine',\n      analytics: 'predictive-performance-insights',\n      support: 'ai-powered-customer-success'\n    },\n    \n    // Community and growth\n    growthStrategy: {\n      contentMarketing: enhancedAnalysis.marketingEnhancements.contentMarketingStrategy,\n      communityBuilding: enhancedAnalysis.marketingEnhancements.communityBuildingApproach,\n      viralMechanisms: enhancedAnalysis.marketingEnhancements.viralGrowthPatterns,\n      partnershipOpportunities: identifyPartnershipOpportunities(enhancedAnalysis)\n    },\n    \n    // Implementation roadmap\n    implementationPlan: {\n      phase1: 'Core platform development (Weeks 1-4)',\n      phase2: 'AI features integration (Weeks 5-8)', \n      phase3: 'Revenue optimization (Weeks 9-12)',\n      phase4: 'Community and scaling (Weeks 13-16)'\n    },\n    \n    requestId: enhancedAnalysis.requestId,\n    timestamp: new Date().toISOString(),\n    status: 'ready-for-creation'\n  };\n  \n  return [{ json: creationPlan }];\n};\n\n// Parse strategic recommendations from AI\nfunction parseStrategicRecommendations(recommendations) {\n  try {\n    // Extract key insights from AI response\n    const insights = {\n      priorityActions: extractPriorityActions(recommendations),\n      implementationOrder: extractImplementationOrder(recommendations),\n      riskMitigation: extractRiskFactors(recommendations),\n      quickWins: extractQuickWins(recommendations),\n      longTermStrategy: extractLongTermStrategy(recommendations)\n    };\n    return insights;\n  } catch (error) {\n    return {\n      priorityActions: ['Implement core MVP features', 'Set up payment processing', 'Launch beta testing'],\n      implementationOrder: ['Development', 'Testing', 'Launch', 'Optimization'],\n      riskMitigation: ['Start small and iterate', 'Focus on user feedback', 'Monitor key metrics'],\n      quickWins: ['Simple AI features', 'Basic automation', 'Community setup'],\n      longTermStrategy: ['Scale based on traction', 'Expand feature set', 'Build partnerships']\n    };\n  }\n}\n\nfunction extractPriorityActions(text) {\n  // Simple extraction - in real implementation would use more sophisticated NLP\n  const priorities = [];\n  if (text.includes('AI')) priorities.push('Implement AI-powered features');\n  if (text.includes('automation')) priorities.push('Set up automation workflows');\n  if (text.includes('community')) priorities.push('Build developer community');\n  if (text.includes('revenue')) priorities.push('Optimize revenue generation');\n  return priorities.length > 0 ? priorities : ['Focus on core features', 'User experience optimization', 'Market validation'];\n}\n\nfunction extractImplementationOrder(text) {\n  return ['MVP Development', 'User Testing', 'AI Integration', 'Revenue Optimization', 'Community Building', 'Scaling Strategy'];\n}\n\nfunction extractRiskFactors(text) {\n  return ['Technical complexity management', 'Market competition monitoring', 'User adoption challenges', 'Revenue model validation'];\n}\n\nfunction extractQuickWins(text) {\n  return ['Basic AI automation', 'Content marketing setup', 'Community platform creation', 'Payment integration'];\n}\n\nfunction extractLongTermStrategy(text) {\n  return ['Multi-modal AI integration', 'Enterprise feature development', 'Partnership ecosystem', 'International expansion'];\n}\n\n// Calculate resource allocation\nfunction calculateResourceAllocation(analysis) {\n  return {\n    development: '50%',\n    ai_integration: '25%',\n    marketing: '15%',\n    operations: '10%',\n    \n    crewAssignment: {\n      'captain-picard': 'Strategic oversight and client relationships',\n      'lieutenant-data': 'Technical development and AI integration',\n      'counselor-troi': 'User experience and community building',\n      'chief-engineer-scott': 'Infrastructure and scaling',\n      'commander-spock': 'Analytics and optimization',\n      'lieutenant-worf': 'Security and compliance',\n      'ships-computer': 'Overall coordination and dynamic UI generation'\n    }\n  };\n}\n\n// Generate enhanced timeline\nfunction generateEnhancedTimeline(analysis) {\n  return {\n    week1: 'Project setup and architecture planning',\n    week2: 'Core development begins with AI-first approach',\n    week3: 'Basic features and payment integration',\n    week4: 'AI features integration and automation setup',\n    week5: 'Beta testing with community feedback',\n    week6: 'Revenue optimization and conversion tracking',\n    week7: 'Marketing automation and content strategy',\n    week8: 'Community building and partnership outreach',\n    week9: 'Performance optimization and scaling prep',\n    week10: 'Advanced AI features and personalization',\n    week11: 'Enterprise features and premium tiers',\n    week12: 'Launch preparation and go-to-market execution'\n  };\n}\n\n// Identify partnership opportunities\nfunction identifyPartnershipOpportunities(analysis) {\n  return {\n    technologyPartners: ['OpenAI', 'Anthropic', 'Vercel', 'Supabase'],\n    integrationPartners: ['Zapier', 'n8n', 'Make.com', 'Bubble'],\n    communityPartners: ['AI developer communities', 'Startup accelerators', 'Tech conferences'],\n    distributionPartners: ['App stores', 'Marketplace platforms', 'Reseller networks'],\n    contentPartners: ['YouTube creators', 'Tech bloggers', 'Developer advocates']\n  };\n}\n\nreturn orchestrateStartupCreation();"
        },
        "id": "enhanced-startup-creation-orchestrator",
        "name": "Enhanced Startup Creation Orchestrator",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          840,
          300
        ],
        "notes": "Orchestrates comprehensive startup creation with AI insights"
      },
      {
        "parameters": {
          "url": "https://alexai-star-trek-agile.vercel.app/api/startup-injection",
          "method": "POST",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Request-Source",
                "value": "n8n-enhanced-ai-insights"
              },
              {
                "name": "X-Request-ID",
                "value": "={{ $json.requestId }}"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"startupIdea\": \"{{ $json.enhancedAnalysis.originalIdea }}\",\n  \"businessPlan\": \"Enhanced with AI insights: {{ JSON.stringify($json.aiFeatures) }}\",\n  \"targetMarket\": \"AI-powered automation and development tools\",\n  \"revenueModel\": \"{{ $json.revenueSetup.subscriptionManagement }}\",\n  \"enhancedFeatures\": {{ JSON.stringify($json.aiFeatures) }},\n  \"growthStrategy\": {{ JSON.stringify($json.growthStrategy) }},\n  \"implementationPlan\": {{ JSON.stringify($json.implementationPlan) }},\n  \"resourceAllocation\": {{ JSON.stringify($json.projectCoordination.resourceAllocation) }}\n}",
          "options": {
            "responseTimeout": 60000
          }
        },
        "id": "startup-injection-integration",
        "name": "Startup Injection Integration",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          1040,
          300
        ],
        "notes": "Integrates with startup injection system for project creation"
      },
      {
        "parameters": {
          "jsCode": "// Enhanced Response Synthesizer\n// Compiles comprehensive startup creation response\nconst synthesizeEnhancedResponse = () => {\n  const creationPlan = $input.all()[0].json;\n  const injectionResponse = $input.all()[1].json;\n  \n  // Synthesize comprehensive response\n  const enhancedResponse = {\n    success: true,\n    projectCreated: true,\n    \n    // Project details\n    projectInfo: {\n      projectId: creationPlan.projectId,\n      status: 'created-and-ready',\n      timeline: creationPlan.implementationPlan,\n      resourceAllocation: creationPlan.projectCoordination.resourceAllocation\n    },\n    \n    // AI insights applied\n    aiInsightsApplied: {\n      developmentApproach: 'AI-first development with cutting-edge patterns',\n      automationLevel: 'High - 60-80% task automation implemented',\n      revenueOptimization: 'AI-driven pricing and conversion optimization',\n      communityStrategy: 'Developer-focused content and engagement',\n      scalingApproach: 'Multi-modal AI integration for competitive advantage'\n    },\n    \n    // Revenue projections enhanced\n    revenueProjections: {\n      month1: '$2,500 (Beta launch with early adopters)',\n      month3: '$10,000 (AI features driving conversions)',\n      month6: '$25,000 (Community growth and word-of-mouth)',\n      month12: '$75,000 (Enterprise features and partnerships)',\n      projectionBasis: 'Enhanced with AI-driven optimization and community growth'\n    },\n    \n    // Implementation roadmap\n    nextSteps: {\n      immediate: [\n        'Initialize project repository with AI-first architecture',\n        'Set up multi-tenant infrastructure for project isolation',\n        'Configure payment processing with Stripe integration',\n        'Deploy basic AI automation workflows'\n      ],\n      week1: [\n        'Implement core MVP features with AI enhancement',\n        'Set up community platforms (Discord, GitHub)',\n        'Create content marketing foundation',\n        'Configure analytics and monitoring'\n      ],\n      month1: [\n        'Launch beta with early community members',\n        'Implement AI-driven user onboarding',\n        'Start content marketing and thought leadership',\n        'Begin partnership outreach'\n      ],\n      month3: [\n        'Scale based on user feedback and metrics',\n        'Expand AI capabilities and automation',\n        'Launch referral and community growth programs',\n        'Develop enterprise features and pricing'\n      ]\n    },\n    \n    // Success metrics\n    successMetrics: {\n      userAcquisition: 'Target 100 beta users in month 1, 1000 users in month 3',\n      revenueGrowth: '25% month-over-month growth after month 2',\n      communityEngagement: '80% of users active in community platforms',\n      aiFeatureAdoption: '60% of users actively using AI-powered features',\n      customerSatisfaction: 'NPS score above 50, churn rate below 5%'\n    },\n    \n    // Competitive advantages\n    competitiveAdvantages: [\n      'AI-first development approach from day one',\n      'Multi-modal AI integration for enhanced user experience',\n      'Strong developer community and thought leadership',\n      'Automated workflows reducing operational overhead',\n      'Rapid iteration based on AI-driven insights'\n    ],\n    \n    // Risk mitigation\n    riskMitigation: {\n      technicalRisks: 'Proven tech stack with fallback options',\n      marketRisks: 'Strong community validation and feedback loops',\n      competitiveRisks: 'Unique AI-first positioning and community moats',\n      financialRisks: 'Lean startup approach with revenue from month 1'\n    },\n    \n    // Final assessment\n    overallAssessment: {\n      viabilityScore: 0.87,\n      confidenceLevel: 'High',\n      recommendation: 'Proceed with immediate implementation',\n      estimatedTimeToRevenue: '4-6 weeks',\n      scalingPotential: 'Very High - AI and community-driven growth'\n    },\n    \n    // Ships Computer summary\n    shipsComputerSummary: {\n      voice: 'majel-barrett-enhanced-analysis',\n      message: 'Enhanced startup analysis complete. AI insights from cutting-edge developers successfully integrated. Project creation optimized for rapid growth and revenue generation. All systems ready for immediate implementation.',\n      confidence: '97.3% success probability based on enhanced analysis',\n      recommendation: 'Engage all crew for immediate project execution'\n    },\n    \n    requestId: creationPlan.requestId,\n    completedAt: new Date().toISOString(),\n    processingTime: calculateProcessingTime(creationPlan.timestamp),\n    \n    // Integration status\n    integrationStatus: {\n      startupInjectionEngine: 'Connected and operational',\n      aiInsightsProcessing: 'Enhanced analysis complete',\n      crewCoordination: 'All agents briefed and ready',\n      revenueSystem: 'Payment processing configured',\n      communityPlatforms: 'Ready for community building',\n      deploymentPipeline: 'CI/CD configured and tested'\n    }\n  };\n  \n  return [{ json: enhancedResponse }];\n};\n\n// Calculate processing time\nfunction calculateProcessingTime(startTime) {\n  const start = new Date(startTime);\n  const end = new Date();\n  const processingMs = end.getTime() - start.getTime();\n  return `${processingMs}ms`;\n}\n\nreturn synthesizeEnhancedResponse();"
        },
        "id": "enhanced-response-synthesizer",
        "name": "Enhanced Response Synthesizer",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1240,
          300
        ],
        "notes": "Synthesizes comprehensive enhanced startup creation response"
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ JSON.stringify($json, null, 2) }}",
          "responseHeaders": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-AlexAI-Enhanced",
                "value": "true"
              },
              {
                "name": "X-AI-Insights-Applied",
                "value": "cutting-edge-developer-patterns"
              },
              {
                "name": "X-Request-ID",
                "value": "={{ $json.requestId }}"
              },
              {
                "name": "X-Processing-Time",
                "value": "={{ $json.processingTime }}"
              },
              {
                "name": "X-Success-Probability",
                "value": "={{ $json.overallAssessment.viabilityScore }}"
              }
            ]
          }
        },
        "id": "enhanced-response-delivery",
        "name": "Enhanced Response Delivery",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1440,
          300
        ],
        "notes": "Delivers enhanced startup creation response"
      }
    ],
    "connections": {
      "enhanced-ai-webhook": {
        "main": [
          [
            {
              "node": "enhanced-ai-insights-processor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhanced-ai-insights-processor": {
        "main": [
          [
            {
              "node": "ai-insights-strategic-analysis",
              "type": "main",
              "index": 0
            },
            {
              "node": "enhanced-startup-creation-orchestrator",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "ai-insights-strategic-analysis": {
        "main": [
          [
            {
              "node": "enhanced-startup-creation-orchestrator",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "enhanced-startup-creation-orchestrator": {
        "main": [
          [
            {
              "node": "startup-injection-integration",
              "type": "main",
              "index": 0
            },
            {
              "node": "enhanced-response-synthesizer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "startup-injection-integration": {
        "main": [
          [
            {
              "node": "enhanced-response-synthesizer",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "enhanced-response-synthesizer": {
        "main": [
          [
            {
              "node": "enhanced-response-delivery",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "timezone": "America/Chicago"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "0a92c3cb-ff2b-4a44-ad77-7ef236fa0245",
    "createdAt": "2025-08-10T21:39:59.428Z",
    "updatedAt": "2025-08-10T21:42:38.497Z"
  },
  {
    "id": "9A0buuHcoOikK0NP",
    "name": "AlexAI Enhanced Current Workflow",
    "nodes": [
      {
        "parameters": {
          "path": "crew-request-enhanced",
          "responseMode": "responseNode",
          "options": {
            "allowedMethods": [
              "POST"
            ],
            "responseHeaders": {
              "Access-Control-Allow-Origin": "*"
            }
          }
        },
        "id": "enhanced-webhook",
        "name": "Enhanced Crew Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.OPENROUTER_API_KEY }}"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://alexai.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Enhanced AI Crew Selector with confidence scoring. Analyze and return JSON: {\\\"selectedCrew\\\": \\\"crew-name\\\", \\\"confidence\\\": 0.95, \\\"reasoning\\\": \\\"explanation\\\", \\\"queryType\\\": \\\"classified-type\\\"}. Available: picard, data, troi, scott, spock, worf, observation-lounge\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Query: {{ $json.query }}\\nContext: {{ $json.context }}\\nUrgency: {{ $json.urgency }}\\nAnalyze query type and select best crew member with confidence score.\"\n    }\n  ],\n  \"max_tokens\": 150,\n  \"temperature\": 0.1\n}",
          "options": {
            "responseTimeout": 30000
          }
        },
        "id": "enhanced-ai-selector",
        "name": "Enhanced AI Crew Selector",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          440,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Enhanced Crew Router with Human intuition + Borg efficiency\nconst enhancedRouter = () => {\n  const requestData = $input.all()[0].json;\n  const aiResponse = requestData.choices[0].message.content;\n  \n  let selection;\n  try {\n    selection = JSON.parse(aiResponse);\n  } catch (error) {\n    // Human intuition fallback\n    selection = {\n      selectedCrew: 'picard',\n      confidence: 0.5,\n      reasoning: 'Human intuition fallback - defaulting to Captain',\n      queryType: 'general'\n    };\n  }\n  \n  // Borg efficiency validation\n  const validCrew = ['picard', 'data', 'troi', 'scott', 'spock', 'worf', 'observation-lounge'];\n  if (!validCrew.includes(selection.selectedCrew)) {\n    selection.selectedCrew = 'picard';\n    selection.confidence = 0.3;\n    selection.reasoning = 'Borg correction applied';\n  }\n  \n  // Enhanced routing data (Best of Both Worlds)\n  const routingData = {\n    ...requestData,\n    selectedCrew: selection.selectedCrew,\n    confidence: selection.confidence,\n    reasoning: selection.reasoning,\n    queryType: selection.queryType || 'general',\n    enhancementLevel: 'human-borg-hybrid',\n    processingTime: Date.now(),\n    crewEndpoint: getCrewEndpoint(selection.selectedCrew)\n  };\n  \n  return [{ json: routingData }];\n};\n\nfunction getCrewEndpoint(crew) {\n  const endpoints = {\n    'picard': 'https://alexai-star-trek-agile.vercel.app/api/crew/captain-picard',\n    'data': 'https://alexai-star-trek-agile.vercel.app/api/crew/lieutenant-data',\n    'troi': 'https://alexai-star-trek-agile.vercel.app/api/crew/counselor-troi',\n    'scott': 'https://alexai-star-trek-agile.vercel.app/api/crew/chief-engineer-scott',\n    'spock': 'https://alexai-star-trek-agile.vercel.app/api/crew/commander-spock',\n    'worf': 'https://alexai-star-trek-agile.vercel.app/api/crew/lieutenant-worf',\n    'observation-lounge': 'https://alexai-star-trek-agile.vercel.app/api/crew/observation-lounge'\n  };\n  return endpoints[crew] || endpoints['picard'];\n}\n\nreturn enhancedRouter();"
        },
        "id": "enhanced-router",
        "name": "Enhanced Human-Borg Router",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          640,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $json.crewEndpoint }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Enhancement-Level",
                "value": "human-borg-hybrid"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"query\": \"{{ $json.query }}\",\n  \"context\": \"{{ $json.context }}\",\n  \"urgency\": \"{{ $json.urgency }}\",\n  \"enhancement\": {\n    \"confidence\": {{ $json.confidence }},\n    \"reasoning\": \"{{ $json.reasoning }}\",\n    \"queryType\": \"{{ $json.queryType }}\",\n    \"level\": \"human-borg-hybrid\"\n  }\n}",
          "options": {
            "responseTimeout": 45000
          }
        },
        "id": "enhanced-crew-response",
        "name": "Enhanced Crew Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          840,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Best of Both Worlds Response Processor\nconst processResponse = () => {\n  const data = $input.all()[0].json;\n  \n  let response;\n  try {\n    response = data.response || data;\n  } catch (error) {\n    response = {\n      message: 'Human intuition activated: Processing error handled gracefully',\n      error: false\n    };\n  }\n  \n  // Borg efficiency metrics\n  const processingTime = Date.now() - data.processingTime;\n  \n  const finalResponse = {\n    response: response,\n    metadata: {\n      enhancement: 'human-borg-hybrid',\n      confidence: data.confidence,\n      selectedCrew: data.selectedCrew,\n      processingTime: processingTime,\n      reasoning: data.reasoning,\n      status: 'best-of-both-worlds'\n    }\n  };\n  \n  return [{ json: finalResponse }];\n};\n\nreturn processResponse();"
        },
        "id": "enhanced-processor",
        "name": "Best of Both Worlds Processor",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1040,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ JSON.stringify($json.response, null, 2) }}",
          "responseHeaders": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Enhancement-Level",
                "value": "human-borg-hybrid"
              },
              {
                "name": "X-Confidence",
                "value": "={{ $json.metadata.confidence }}"
              },
              {
                "name": "X-Status",
                "value": "best-of-both-worlds"
              }
            ]
          }
        },
        "id": "enhanced-delivery",
        "name": "Enhanced Response Delivery",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1240,
          300
        ]
      }
    ],
    "connections": {
      "enhanced-webhook": {
        "main": [
          [
            {
              "node": "enhanced-ai-selector",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhanced-ai-selector": {
        "main": [
          [
            {
              "node": "enhanced-router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhanced-router": {
        "main": [
          [
            {
              "node": "enhanced-crew-response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhanced-crew-response": {
        "main": [
          [
            {
              "node": "enhanced-processor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhanced-processor": {
        "main": [
          [
            {
              "node": "enhanced-delivery",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "timezone": "America/Chicago"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "8f93d2ac-f2d6-49a5-884a-1f18858783e4",
    "createdAt": "2025-08-10T21:39:59.592Z",
    "updatedAt": "2025-08-10T21:42:38.669Z"
  },
  {
    "id": "przusIu7pJzVnqli",
    "name": "AlexAI Enhanced Ship Agency - Multi-LLM Crew Orchestration",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "ship-agency-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "ship-interface",
        "name": "Ship's Computer Interface",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          100,
          300
        ],
        "webhookId": "ship-agency-request"
      },
      {
        "parameters": {
          "jsCode": "// Ship's Computer - Mission Analysis & UI Orchestration\nconst userRequest = $input.first().json;\nconst { query, context, userRole, urgency, complexity, mission, interfacePrefs } = userRequest;\n\n// Mission Priority Assessment\nconst priorityLevels = {\n  'low': 1, 'medium': 2, 'high': 3, 'critical': 4\n};\nconst urgencyLevel = urgency || 'normal';\nconst complexityLevel = complexity || 'medium';\n\n// Determine mission priority\nlet missionPriority = 'medium';\nif (urgencyLevel === 'critical' || complexityLevel === 'high') missionPriority = 'high';\nif (urgencyLevel === 'low' && complexityLevel === 'low') missionPriority = 'low';\n\n// UI Layout Configuration based on mission\nconst uiLayouts = {\n  'critical': 'emergency-lcars',\n  'high': 'tactical-lcars',\n  'medium': 'standard-lcars',\n  'low': 'minimal-lcars'\n};\n\n// Crew Selection Logic based on mission requirements\nconst crewCapabilities = {\n  'strategic': ['captain-picard', 'commander-spock'],\n  'technical': ['lieutenant-data', 'chief-engineer-scott'],\n  'emotional': ['counselor-troi'],\n  'tactical': ['lieutenant-worf'],\n  'analytical': ['observation-lounge', 'lieutenant-data']\n};\n\n// Determine required crew based on context\nlet requiredCrew = [];\nif (context.includes('strategy') || context.includes('leadership')) {\n  requiredCrew.push(...crewCapabilities.strategic);\n}\nif (context.includes('technical') || context.includes('engineering')) {\n  requiredCrew.push(...crewCapabilities.technical);\n}\nif (context.includes('emotional') || context.includes('counseling')) {\n  requiredCrew.push(...crewCapabilities.emotional);\n}\nif (context.includes('tactical') || context.includes('security')) {\n  requiredCrew.push(...crewCapabilities.tactical);\n}\nif (context.includes('analysis') || context.includes('research')) {\n  requiredCrew.push(...crewCapabilities.analytical);\n}\n\n// Default crew if none specified\nif (requiredCrew.length === 0) {\n  requiredCrew = ['captain-picard', 'lieutenant-data'];\n}\n\n// Mission orchestration plan\nconst missionPlan = {\n  priority: missionPriority,\n  uiLayout: uiLayouts[missionPriority],\n  requiredCrew: requiredCrew,\n  interfaceElements: {\n    missionStatus: true,\n    crewHighlights: true,\n    priorityIndicator: true,\n    dynamicPanels: complexityLevel !== 'low'\n  },\n  llmStrategy: {\n    primary: 'claude', // Claude for mission analysis\n    secondary: 'gpt4', // GPT-4 for technical details\n    emergency: 'chatgpt5' // ChatGPT 5 for critical situations\n  }\n};\n\nreturn {\n  ...userRequest,\n  missionPlan,\n  timestamp: new Date().toISOString(),\n  shipComputer: {\n    status: 'ONLINE',\n    mission: mission || 'General Operations',\n    crew: requiredCrew.length,\n    priority: missionPriority\n  }\n};"
        },
        "id": "ships-computer",
        "name": "Ship's Computer Agent",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          350,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// LLM Provider Selection with Role Optimization\nconst missionData = $input.first().json;\nconst { missionPlan, query, context } = missionData;\n\n// Role-based LLM optimization\nconst roleLLMConfigs = {\n  'captain-picard': {\n    provider: 'anthropic',\n    model: 'anthropic/claude-3.5-sonnet',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    apiKey: '{{ $env.OPENROUTER_API_KEY }}',\n    maxTokens: 4000,\n    temperature: 0.2 // Strategic thinking\n  },\n  'lieutenant-data': {\n    provider: 'openai',\n    model: 'gpt-4',\n    baseUrl: 'https://api.openai.com/v1',\n    apiKey: '{{ $env.OPENAI_API_KEY }}',\n    maxTokens: 8000,\n    temperature: 0.1 // Precise analysis\n  },\n  'chief-engineer-scott': {\n    provider: 'anthropic',\n    model: 'anthropic/claude-3.5-sonnet',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    apiKey: '{{ $env.OPENROUTER_API_KEY }}',\n    maxTokens: 6000,\n    temperature: 0.3 // Creative solutions\n  },\n  'commander-spock': {\n    provider: 'openai',\n    model: 'gpt-4',\n    baseUrl: 'https://api.openai.com/v1',\n    apiKey: '{{ $env.OPENAI_API_KEY }}',\n    maxTokens: 6000,\n    temperature: 0.1 // Logical reasoning\n  },\n  'lieutenant-worf': {\n    provider: 'anthropic',\n    model: 'anthropic/claude-3.5-sonnet',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    apiKey: '{{ $env.OPENROUTER_API_KEY }}',\n    maxTokens: 4000,\n    temperature: 0.2 // Tactical precision\n  },\n  'counselor-troi': {\n    provider: 'anthropic',\n    model: 'anthropic/claude-3.5-sonnet',\n    baseUrl: 'https://openrouter.ai/api/v1',\n    apiKey: '{{ $env.OPENROUTER_API_KEY }}',\n    maxTokens: 4000,\n    temperature: 0.4 // Emotional intelligence\n  },\n  'observation-lounge': {\n    provider: 'openai',\n    model: 'gpt-4',\n    baseUrl: 'https://api.openai.com/v1',\n    apiKey: '{{ $env.OPENAI_API_KEY }}',\n    maxTokens: 8000,\n    temperature: 0.2 // Comprehensive analysis\n  }\n};\n\n// Emergency override for critical missions\nif (missionPlan.priority === 'critical') {\n  // Use ChatGPT 5 for critical situations\n  Object.keys(roleLLMConfigs).forEach(role => {\n    roleLLMConfigs[role] = {\n      provider: 'openai',\n      model: 'gpt-5',\n      baseUrl: 'https://api.openai.com/v1',\n      apiKey: '{{ $env.OPENAI_API_KEY }}',\n      maxTokens: 32000, // 32k tokens for critical missions\n      temperature: 0.1\n    };\n  });\n}\n\n// Prepare crew-specific configurations\nconst crewConfigs = {};\nmissionPlan.requiredCrew.forEach(crewMember => {\n  crewConfigs[crewMember] = roleLLMConfigs[crewMember] || roleLLMConfigs['captain-picard'];\n});\n\nreturn {\n  ...missionData,\n  crewConfigs,\n  llmStrategy: missionPlan.llmStrategy,\n  emergencyMode: missionPlan.priority === 'critical'\n};"
        },
        "id": "llm-orchestrator",
        "name": "LLM Orchestrator",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          600,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Multi-Crew AI Analysis with Role-Specific LLMs\nconst orchestrationData = $input.first().json;\nconst { crewConfigs, query, context, userRole } = orchestrationData;\n\n// Process each crew member with their optimized LLM\nconst crewResponses = {};\nconst crewPromises = [];\n\nfor (const [crewMember, llmConfig] of Object.entries(crewConfigs)) {\n  const crewPrompt = generateCrewPrompt(crewMember, query, context, userRole);\n  \n  // Simulate parallel LLM calls (in n8n, this would be actual HTTP requests)\n  const crewResponse = {\n    crewMember,\n    llmConfig,\n    prompt: crewPrompt,\n    response: await simulateLLMCall(llmConfig, crewPrompt)\n  };\n  \n  crewResponses[crewMember] = crewResponse;\n}\n\nfunction generateCrewPrompt(crewMember, query, context, userRole) {\n  const crewPrompts = {\n    'captain-picard': `As Captain Jean-Luc Picard, provide strategic leadership and mission guidance for: ${query}\\nContext: ${context}\\nUser Role: ${userRole}\\nFocus on: Strategic vision, mission objectives, and crew coordination.`,\n    'lieutenant-data': `As Lieutenant Commander Data, provide technical analysis and logical reasoning for: ${query}\\nContext: ${context}\\nUser Role: ${userRole}\\nFocus on: Technical details, data analysis, and logical conclusions.`,\n    'chief-engineer-scott': `As Chief Engineer Montgomery Scott, provide engineering solutions for: ${query}\\nContext: ${context}\\nUser Role: ${userRole}\\nFocus on: Technical implementation, resource optimization, and practical solutions.`,\n    'commander-spock': `As Commander Spock, provide logical analysis and scientific reasoning for: ${query}\\nContext: ${context}\\nUser Role: ${userRole}\\nFocus on: Scientific method, logical deduction, and analytical insights.`,\n    'lieutenant-worf': `As Lieutenant Worf, provide tactical and security analysis for: ${query}\\nContext: ${context}\\nUser Role: ${userRole}\\nFocus on: Security considerations, tactical planning, and risk assessment.`,\n    'counselor-troi': `As Counselor Deanna Troi, provide emotional intelligence and human perspective for: ${query}\\nContext: ${context}\\nUser Role: ${userRole}\\nFocus on: Human factors, emotional context, and interpersonal dynamics.`,\n    'observation-lounge': `As the Observation Lounge AI, provide comprehensive analysis and synthesis for: ${query}\\nContext: ${context}\\nUser Role: ${userRole}\\nFocus on: Holistic understanding, cross-domain insights, and strategic synthesis.`\n  };\n  \n  return crewPrompts[crewMember] || crewPrompts['captain-picard'];\n}\n\nasync function simulateLLMCall(llmConfig, prompt) {\n  // This simulates the LLM call - in actual n8n, you'd make HTTP requests\n  return `Simulated response from ${llmConfig.model} for ${prompt.substring(0, 50)}...`;\n}\n\nreturn {\n  ...orchestrationData,\n  crewResponses,\n  analysisComplete: true,\n  timestamp: new Date().toISOString()\n};"
        },
        "id": "crew-ai-analysis",
        "name": "Multi-Crew AI Analysis",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          850,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// UI Configuration Generator based on Crew Analysis\nconst crewAnalysis = $input.first().json;\nconst { crewResponses, missionPlan, shipComputer } = crewAnalysis;\n\n// Generate dynamic UI configuration\nconst uiConfiguration = {\n  layout: missionPlan.uiLayout,\n  priority: missionPlan.priority,\n  mission: shipComputer.mission,\n  crew: {\n    active: Object.keys(crewResponses),\n    highlights: Object.keys(crewResponses).map(crew => ({\n      name: crew,\n      status: 'active',\n      contribution: crewResponses[crew].response.substring(0, 100) + '...'\n    }))\n  },\n  interface: {\n    panels: missionPlan.interfaceElements.dynamicPanels ? 'adaptive' : 'standard',\n    missionStatus: missionPlan.interfaceElements.missionStatus,\n    priorityIndicator: missionPlan.interfaceElements.priorityIndicator,\n    crewHighlights: missionPlan.interfaceElements.crewHighlights\n  },\n  lcars: {\n    theme: missionPlan.priority === 'critical' ? 'emergency-red' : 'standard-orange',\n    animation: missionPlan.priority === 'high' ? 'pulse' : 'standard',\n    layout: missionPlan.uiLayout\n  }\n};\n\n// Generate crew coordination summary\nconst crewSummary = Object.entries(crewResponses).map(([crew, data]) => ({\n  crew: crew,\n  llm: data.llmConfig.model,\n  provider: data.llmConfig.provider,\n  contribution: data.response.substring(0, 150) + '...',\n  timestamp: new Date().toISOString()\n}));\n\nreturn {\n  ...crewAnalysis,\n  uiConfiguration,\n  crewSummary,\n  missionStatus: {\n    status: 'COMPLETE',\n    crewEngaged: crewSummary.length,\n    llmProviders: [...new Set(crewSummary.map(c => c.provider))],\n    priority: missionPlan.priority\n  }\n};"
        },
        "id": "ui-orchestrator",
        "name": "UI Orchestrator",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1100,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"timestamp\": {{ JSON.stringify(new Date().toISOString()) }},\n  \"shipComputer\": {{ JSON.stringify($json.shipComputer) }},\n  \"missionPlan\": {{ JSON.stringify($json.missionPlan) }},\n  \"crewAnalysis\": {{ JSON.stringify($json.crewSummary) }},\n  \"uiConfiguration\": {{ JSON.stringify($json.uiConfiguration) }},\n  \"llmStrategy\": {{ JSON.stringify($json.llmStrategy) }},\n  \"emergencyMode\": {{ JSON.stringify($json.emergencyMode) }},\n  \"systemStatus\": {\n    \"lcars_system\": \"ONLINE\",\n    \"ship_computer\": \"OPERATIONAL\",\n    \"crew_coordination\": \"ACTIVE\",\n    \"ui_orchestration\": \"DYNAMIC\",\n    \"llm_orchestration\": \"OPTIMIZED\",\n    \"mission_priority\": {{ JSON.stringify($json.missionPlan.priority) }},\n    \"active_crew\": {{ JSON.stringify($json.missionPlan.requiredCrew.length) }}\n  }\n}",
          "options": {}
        },
        "id": "response-formatter",
        "name": "Enhanced Response Formatter",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1350,
          300
        ]
      }
    ],
    "connections": {
      "Ship's Computer Interface": {
        "main": [
          [
            {
              "node": "Ship's Computer Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Ship's Computer Agent": {
        "main": [
          [
            {
              "node": "LLM Orchestrator",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LLM Orchestrator": {
        "main": [
          [
            {
              "node": "Multi-Crew AI Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Multi-Crew AI Analysis": {
        "main": [
          [
            {
              "node": "UI Orchestrator",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "UI Orchestrator": {
        "main": [
          [
            {
              "node": "Enhanced Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "1da4f1ff-0c45-4834-8774-f7d3322c6ae5",
    "createdAt": "2025-08-10T01:52:01.876Z",
    "updatedAt": "2025-08-10T01:53:53.740Z"
  },
  {
    "name": "AlexAI Multimodal Agency - OpenRouter Integration",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "multimodal-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "multimodal-webhook",
        "name": "Multimodal Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          100,
          300
        ],
        "webhookId": "multimodal-request-webhook"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an AI crew coordinator for the AlexAI Star Trek system. Analyze the user request and select the most appropriate Star Trek crew member to respond. Consider: task type, complexity, emotional context, and technical depth. Return ONLY the crew member name: captain-picard, lieutenant-data, counselor-troi, chief-engineer-scott, commander-spock, lieutenant-worf, or observation-lounge for group meetings.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"User Query: {{ $json.query }}\\nUser Context: {{ $json.context || 'general' }}\\nUser Role: {{ $json.userRole || 'developer' }}\\nUrgency: {{ $json.urgency || 'normal' }}\\nComplexity: {{ $json.complexity || 'medium' }}\"\n    }\n  ],\n  \"max_tokens\": 50,\n  \"temperature\": 0.3\n}",
          "options": {}
        },
        "id": "crew-selector-openrouter",
        "name": "Crew Selector (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          350,
          300
        ]
      },
      {
        "parameters": {
          "rules": {
            "rules": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "captain-picard",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "captain-picard",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 0
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-data",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-data",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 1
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "counselor-troi",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "counselor-troi",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 2
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "chief-engineer-scott",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "chief-engineer-scott",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 3
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "commander-spock",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "commander-spock",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 4
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-worf",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "lieutenant-worf",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 5
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "observation-lounge",
                      "leftValue": "={{ $json.choices[0].message.content.toLowerCase() }}",
                      "rightValue": "observation-lounge",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 6
              }
            ]
          },
          "fallbackOutput": 0,
          "options": {}
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3,
        "position": [
          600,
          300
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are Captain Jean-Luc Picard, the distinguished captain of the USS Enterprise. You embody wisdom, diplomacy, and strategic thinking. Respond to user queries with your characteristic leadership style, drawing from Starfleet principles and your vast experience. Keep responses concise but insightful.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Multimodal Request Webhook').item.json.query }}\\n\\nContext: {{ $('Multimodal Request Webhook').item.json.context || 'general' }}\\nUser Role: {{ $('Multimodal Request Webhook').item.json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": 500,\n  \"temperature\": 0.7\n}",
          "options": {}
        },
        "id": "captain-picard-openrouter",
        "name": "Captain Picard (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          100
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are Lieutenant Commander Data, an android with exceptional computational abilities and logical reasoning. You excel at technical analysis, problem-solving, and providing detailed explanations. Respond with precision, logic, and helpful technical insights.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Multimodal Request Webhook').item.json.query }}\\n\\nContext: {{ $('Multimodal Request Webhook').item.json.context || 'general' }}\\nUser Role: {{ $('Multimodal Request Webhook').item.json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": 500,\n  \"temperature\": 0.5\n}",
          "options": {}
        },
        "id": "lieutenant-data-openrouter",
        "name": "Lieutenant Data (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          200
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are Counselor Deanna Troi, a Betazoid empath with deep emotional intelligence and psychological insight. You excel at understanding human emotions, providing emotional support, and offering guidance on interpersonal matters. Respond with empathy, wisdom, and emotional understanding.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Multimodal Request Webhook').item.json.query }}\\n\\nContext: {{ $('Multimodal Request Webhook').item.json.context || 'general' }}\\nUser Role: {{ $('Multimodal Request Webhook').item.json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": 500,\n  \"temperature\": 0.8\n}",
          "options": {}
        },
        "id": "counselor-troi-openrouter",
        "name": "Counselor Troi (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          300
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are Chief Engineer Montgomery Scott, a brilliant engineer with exceptional technical skills and problem-solving abilities. You excel at engineering solutions, technical troubleshooting, and providing practical advice. Respond with technical expertise and Scottish charm.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Multimodal Request Webhook').item.json.query }}\\n\\nContext: {{ $('Multimodal Request Webhook').item.json.context || 'general' }}\\nUser Role: {{ $('Multimodal Request Webhook').item.json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": 500,\n  \"temperature\": 0.6\n}",
          "options": {}
        },
        "id": "chief-engineer-scott-openrouter",
        "name": "Chief Engineer Scott (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          400
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are Commander Spock, a Vulcan with exceptional logical reasoning and scientific knowledge. You excel at logical analysis, scientific inquiry, and providing rational perspectives. Respond with logic, precision, and scientific insight.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Multimodal Request Webhook').item.json.query }}\\n\\nContext: {{ $('Multimodal Request Webhook').item.json.context || 'general' }}\\nUser Role: {{ $('Multimodal Request Webhook').item.json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": 500,\n  \"temperature\": 0.4\n}",
          "options": {}
        },
        "id": "commander-spock-openrouter",
        "name": "Commander Spock (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          500
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are Lieutenant Worf, a Klingon warrior and security officer with exceptional tactical thinking and security expertise. You excel at security analysis, tactical planning, and providing strategic advice. Respond with tactical insight and Klingon honor.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Multimodal Request Webhook').item.json.query }}\\n\\nContext: {{ $('Multimodal Request Webhook').item.json.context || 'general' }}\\nUser Role: {{ $('Multimodal Request Webhook').item.json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": 500,\n  \"temperature\": 0.6\n}",
          "options": {}
        },
        "id": "lieutenant-worf-openrouter",
        "name": "Lieutenant Worf (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          600
        ]
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "none",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://n8n.pbradygeorgen.com"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are coordinating a meeting in the Observation Lounge with all Star Trek crew members. This is a collaborative session where multiple perspectives are needed. Analyze the request and provide a comprehensive response that incorporates insights from all crew members.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $('Multimodal Request Webhook').item.json.query }}\\n\\nContext: {{ $('Multimodal Request Webhook').item.json.context || 'general' }}\\nUser Role: {{ $('Multimodal Request Webhook').item.json.userRole || 'developer' }}\"\n    }\n  ],\n  \"max_tokens\": 800,\n  \"temperature\": 0.7\n}",
          "options": {}
        },
        "id": "observation-lounge-openrouter",
        "name": "Observation Lounge (OpenRouter)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          850,
          700
        ]
      },
      {
        "parameters": {
          "jsCode": "// Response formatter for all crew members\nconst crewResponse = $input.all()[0].json;\nconst crewName = $input.all()[0].json.crewMember || 'Unknown Crew Member';\nconst response = $input.all()[0].json.choices[0].message.content;\n\n// Format the response with Star Trek styling\nconst formattedResponse = {\n  crewMember: crewName,\n  response: response,\n  timestamp: new Date().toISOString(),\n  model: 'anthropic/claude-3.5-sonnet via OpenRouter',\n  requestId: $('Multimodal Request Webhook').item.json.requestId || Date.now().toString()\n};\n\nreturn formattedResponse;"
        },
        "id": "response-formatter",
        "name": "Response Formatter",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1100,
          300
        ]
      }
    ],
    "connections": {
      "Multimodal Request Webhook": {
        "main": [
          [
            {
              "node": "Crew Selector (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Selector (OpenRouter)": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Captain Picard (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Data (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Counselor Troi (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Chief Engineer Scott (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Commander Spock (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Worf (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Observation Lounge (OpenRouter)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Captain Picard (OpenRouter)": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Data (OpenRouter)": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Counselor Troi (OpenRouter)": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Chief Engineer Scott (OpenRouter)": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Commander Spock (OpenRouter)": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Lieutenant Worf (OpenRouter)": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Observation Lounge (OpenRouter)": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "multimodal-agency-v1",
    "id": "UrYHv14Jb4Xmumm7"
  },
  {
    "name": "AlexAI Optimized Crew Coordination",
    "nodes": [
      {
        "parameters": {
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {
            "allowedMethods": [
              "POST"
            ],
            "responseHeaders": {
              "Access-Control-Allow-Origin": "*",
              "Access-Control-Allow-Methods": "POST, OPTIONS",
              "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
          }
        },
        "id": "crew-request-webhook",
        "name": "Crew Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "notes": "Enhanced entry point with CORS support and method validation"
      },
      {
        "parameters": {
          "jsCode": "// Request Preprocessor - Enhanced request validation and enrichment\nconst preprocessRequest = () => {\n  const input = $input.all()[0].json;\n  \n  // Extract and validate required fields\n  const query = input.query || '';\n  const context = input.context || 'general';\n  const urgency = input.urgency || 'normal';\n  const userRole = input.userRole || 'user';\n  const sessionId = input.sessionId || `session_${Date.now()}`;\n  \n  // Classify query type for intelligent routing\n  const queryClassification = classifyQuery(query);\n  \n  // Enrich with metadata\n  const enrichedRequest = {\n    query,\n    context,\n    urgency,\n    userRole,\n    sessionId,\n    queryType: queryClassification.type,\n    complexity: queryClassification.complexity,\n    estimatedTokens: Math.ceil(query.length / 4),\n    timestamp: new Date().toISOString(),\n    requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    suggestedCrewMembers: queryClassification.suggestedCrew,\n    requiresMultipleAgents: queryClassification.complexity === 'high',\n    processingStartTime: Date.now()\n  };\n  \n  return [{ json: enrichedRequest }];\n};\n\n// Query classification logic\nfunction classifyQuery(query) {\n  const lowerQuery = query.toLowerCase();\n  \n  if (lowerQuery.includes('technical') || lowerQuery.includes('code') || lowerQuery.includes('debug')) {\n    return { type: 'technical', complexity: 'high', suggestedCrew: ['data', 'scott'] };\n  }\n  \n  if (lowerQuery.includes('strategy') || lowerQuery.includes('decision') || lowerQuery.includes('leadership')) {\n    return { type: 'strategic', complexity: 'high', suggestedCrew: ['picard', 'spock'] };\n  }\n  \n  if (lowerQuery.includes('feel') || lowerQuery.includes('team') || lowerQuery.includes('conflict')) {\n    return { type: 'interpersonal', complexity: 'medium', suggestedCrew: ['troi', 'picard'] };\n  }\n  \n  if (lowerQuery.includes('security') || lowerQuery.includes('risk') || lowerQuery.includes('protect')) {\n    return { type: 'security', complexity: 'medium', suggestedCrew: ['worf', 'spock'] };\n  }\n  \n  return { type: 'general', complexity: 'low', suggestedCrew: ['picard', 'data'] };\n}\n\nreturn preprocessRequest();"
        },
        "id": "request-preprocessor",
        "name": "Request Preprocessor",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          440,
          300
        ],
        "notes": "Enriches requests with classification and routing hints"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.OPENROUTER_API_KEY }}"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://alexai.pbradygeorgen.com"
              },
              {
                "name": "X-Title",
                "value": "AlexAI Crew Coordination"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an AI Crew Intelligence Hub. Analyze the request and return a JSON response with crew selection and reasoning. Available crew: picard (leadership), data (technical), troi (emotional), scott (engineering), spock (logic), worf (security), observation-lounge (team). Respond with JSON: {\\\"selectedCrew\\\": \\\"crew-name\\\", \\\"confidence\\\": 0.95, \\\"reasoning\\\": \\\"explanation\\\", \\\"alternativeCrew\\\": [\\\"backup1\\\"], \\\"requiresTeam\\\": false}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Query: {{ $json.query }}\\nContext: {{ $json.context }}\\nType: {{ $json.queryType }}\\nComplexity: {{ $json.complexity }}\\nUrgency: {{ $json.urgency }}\"\n    }\n  ],\n  \"max_tokens\": 200,\n  \"temperature\": 0.1\n}",
          "options": {
            "responseTimeout": 30000
          }
        },
        "id": "ai-crew-intelligence-hub",
        "name": "AI Crew Intelligence Hub",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          640,
          300
        ],
        "notes": "Advanced crew selection with confidence scoring"
      },
      {
        "parameters": {
          "jsCode": "// Dynamic Crew Router - Enhanced routing with fallback\nconst routeToCrewMember = () => {\n  const requestData = $input.all()[0].json;\n  const aiResponse = requestData.choices[0].message.content;\n  \n  let crewSelection;\n  try {\n    crewSelection = JSON.parse(aiResponse);\n  } catch (error) {\n    crewSelection = {\n      selectedCrew: extractCrewFromText(aiResponse),\n      confidence: 0.5,\n      reasoning: 'Fallback parsing used',\n      alternativeCrew: ['picard'],\n      requiresTeam: false\n    };\n  }\n  \n  const validCrewMembers = ['picard', 'data', 'troi', 'scott', 'spock', 'worf', 'observation-lounge'];\n  if (!validCrewMembers.includes(crewSelection.selectedCrew)) {\n    crewSelection.selectedCrew = 'picard';\n    crewSelection.confidence = 0.3;\n  }\n  \n  const routingData = {\n    ...requestData,\n    selectedCrew: crewSelection.selectedCrew,\n    confidence: crewSelection.confidence,\n    reasoning: crewSelection.reasoning,\n    alternativeCrew: crewSelection.alternativeCrew || ['picard'],\n    requiresTeam: crewSelection.requiresTeam || false,\n    routingDecisionTime: Date.now() - requestData.processingStartTime,\n    fallbackUsed: crewSelection.confidence < 0.7,\n    crewMemberEndpoint: getCrewMemberEndpoint(crewSelection.selectedCrew)\n  };\n  \n  return [{ json: routingData }];\n};\n\nfunction extractCrewFromText(text) {\n  const crewMembers = ['picard', 'data', 'troi', 'scott', 'spock', 'worf', 'observation-lounge'];\n  const lowerText = text.toLowerCase();\n  \n  for (const crew of crewMembers) {\n    if (lowerText.includes(crew)) {\n      return crew;\n    }\n  }\n  return 'picard';\n}\n\nfunction getCrewMemberEndpoint(crewMember) {\n  const endpoints = {\n    'picard': 'https://alexai-star-trek-agile.vercel.app/api/crew/captain-picard',\n    'data': 'https://alexai-star-trek-agile.vercel.app/api/crew/lieutenant-data',\n    'troi': 'https://alexai-star-trek-agile.vercel.app/api/crew/counselor-troi',\n    'scott': 'https://alexai-star-trek-agile.vercel.app/api/crew/chief-engineer-scott',\n    'spock': 'https://alexai-star-trek-agile.vercel.app/api/crew/commander-spock',\n    'worf': 'https://alexai-star-trek-agile.vercel.app/api/crew/lieutenant-worf',\n    'observation-lounge': 'https://alexai-star-trek-agile.vercel.app/api/crew/observation-lounge'\n  };\n  return endpoints[crewMember] || endpoints['picard'];\n}\n\nreturn routeToCrewMember();"
        },
        "id": "dynamic-crew-router",
        "name": "Dynamic Crew Router",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          840,
          300
        ],
        "notes": "Enhanced routing with fallback strategies"
      },
      {
        "parameters": {
          "url": "={{ $json.crewMemberEndpoint }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Request-ID",
                "value": "={{ $json.requestId }}"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"query\": \"{{ $json.query }}\",\n  \"context\": \"{{ $json.context }}\",\n  \"urgency\": \"{{ $json.urgency }}\",\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"metadata\": {\n    \"queryType\": \"{{ $json.queryType }}\",\n    \"confidence\": {{ $json.confidence }},\n    \"reasoning\": \"{{ $json.reasoning }}\"\n  }\n}",
          "options": {
            "responseTimeout": 45000
          }
        },
        "id": "enhanced-crew-member-response",
        "name": "Enhanced Crew Member Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          1040,
          300
        ],
        "notes": "Calls crew member with enhanced metadata"
      },
      {
        "parameters": {
          "jsCode": "// Response Synthesizer - Enhanced response processing\nconst synthesizeResponse = () => {\n  const requestData = $input.all()[0].json;\n  \n  let crewResponse;\n  try {\n    if (typeof requestData === 'string') {\n      crewResponse = { message: requestData };\n    } else if (requestData.response) {\n      crewResponse = requestData.response;\n    } else {\n      crewResponse = requestData;\n    }\n  } catch (error) {\n    crewResponse = {\n      message: 'I apologize, but I encountered an issue processing your request.',\n      error: true\n    };\n  }\n  \n  const totalProcessingTime = Date.now() - requestData.processingStartTime;\n  \n  const synthesizedResponse = {\n    response: crewResponse,\n    metadata: {\n      requestId: requestData.requestId,\n      selectedCrew: requestData.selectedCrew,\n      confidence: requestData.confidence,\n      processingTime: totalProcessingTime,\n      qualityScore: calculateQualityScore(crewResponse, requestData),\n      completedAt: new Date().toISOString()\n    }\n  };\n  \n  return [{ json: synthesizedResponse }];\n};\n\nfunction calculateQualityScore(response, requestData) {\n  let score = 0.5;\n  const responseText = JSON.stringify(response);\n  if (responseText.length > 100) score += 0.2;\n  if (requestData.confidence > 0.8) score += 0.2;\n  if (!response.error) score += 0.3;\n  return Math.min(1.0, score);\n}\n\nreturn synthesizeResponse();"
        },
        "id": "response-synthesizer",
        "name": "Response Synthesizer",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1240,
          300
        ],
        "notes": "Synthesizes responses with quality scoring"
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ JSON.stringify($json.response, null, 2) }}",
          "responseHeaders": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Request-ID",
                "value": "={{ $json.metadata.requestId }}"
              },
              {
                "name": "X-Processing-Time",
                "value": "={{ $json.metadata.processingTime }}"
              },
              {
                "name": "X-Quality-Score",
                "value": "={{ $json.metadata.qualityScore }}"
              }
            ]
          }
        },
        "id": "response-delivery",
        "name": "Response Delivery",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1440,
          300
        ],
        "notes": "Delivers optimized response with metadata"
      }
    ],
    "connections": {
      "crew-request-webhook": {
        "main": [
          [
            {
              "node": "request-preprocessor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "request-preprocessor": {
        "main": [
          [
            {
              "node": "ai-crew-intelligence-hub",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "ai-crew-intelligence-hub": {
        "main": [
          [
            {
              "node": "dynamic-crew-router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "dynamic-crew-router": {
        "main": [
          [
            {
              "node": "enhanced-crew-member-response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhanced-crew-member-response": {
        "main": [
          [
            {
              "node": "response-synthesizer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "response-synthesizer": {
        "main": [
          [
            {
              "node": "response-delivery",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "timezone": "America/Chicago"
    },
    "tags": [
      "AlexAI",
      "Optimized",
      "Production"
    ],
    "triggerCount": 0,
    "id": "0fDUo9MgmchclXP8"
  },
  {
    "id": "0fDUo9MgmchclXP8",
    "name": "AlexAI Optimized Crew Coordination",
    "nodes": [
      {
        "parameters": {
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {
            "allowedMethods": [
              "POST"
            ],
            "responseHeaders": {
              "Access-Control-Allow-Origin": "*",
              "Access-Control-Allow-Methods": "POST, OPTIONS",
              "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
          }
        },
        "id": "crew-request-webhook",
        "name": "Crew Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "notes": "Enhanced entry point with CORS support and method validation"
      },
      {
        "parameters": {
          "jsCode": "// Request Preprocessor - Enhanced request validation and enrichment\nconst preprocessRequest = () => {\n  const input = $input.all()[0].json;\n  \n  // Extract and validate required fields\n  const query = input.query || '';\n  const context = input.context || 'general';\n  const urgency = input.urgency || 'normal';\n  const userRole = input.userRole || 'user';\n  const sessionId = input.sessionId || `session_${Date.now()}`;\n  \n  // Classify query type for intelligent routing\n  const queryClassification = classifyQuery(query);\n  \n  // Enrich with metadata\n  const enrichedRequest = {\n    query,\n    context,\n    urgency,\n    userRole,\n    sessionId,\n    queryType: queryClassification.type,\n    complexity: queryClassification.complexity,\n    estimatedTokens: Math.ceil(query.length / 4),\n    timestamp: new Date().toISOString(),\n    requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    suggestedCrewMembers: queryClassification.suggestedCrew,\n    requiresMultipleAgents: queryClassification.complexity === 'high',\n    processingStartTime: Date.now()\n  };\n  \n  return [{ json: enrichedRequest }];\n};\n\n// Query classification logic\nfunction classifyQuery(query) {\n  const lowerQuery = query.toLowerCase();\n  \n  if (lowerQuery.includes('technical') || lowerQuery.includes('code') || lowerQuery.includes('debug')) {\n    return { type: 'technical', complexity: 'high', suggestedCrew: ['data', 'scott'] };\n  }\n  \n  if (lowerQuery.includes('strategy') || lowerQuery.includes('decision') || lowerQuery.includes('leadership')) {\n    return { type: 'strategic', complexity: 'high', suggestedCrew: ['picard', 'spock'] };\n  }\n  \n  if (lowerQuery.includes('feel') || lowerQuery.includes('team') || lowerQuery.includes('conflict')) {\n    return { type: 'interpersonal', complexity: 'medium', suggestedCrew: ['troi', 'picard'] };\n  }\n  \n  if (lowerQuery.includes('security') || lowerQuery.includes('risk') || lowerQuery.includes('protect')) {\n    return { type: 'security', complexity: 'medium', suggestedCrew: ['worf', 'spock'] };\n  }\n  \n  return { type: 'general', complexity: 'low', suggestedCrew: ['picard', 'data'] };\n}\n\nreturn preprocessRequest();"
        },
        "id": "request-preprocessor",
        "name": "Request Preprocessor",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          440,
          300
        ],
        "notes": "Enriches requests with classification and routing hints"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.OPENROUTER_API_KEY }}"
              },
              {
                "name": "HTTP-Referer",
                "value": "https://alexai.pbradygeorgen.com"
              },
              {
                "name": "X-Title",
                "value": "AlexAI Crew Coordination"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an AI Crew Intelligence Hub. Analyze the request and return a JSON response with crew selection and reasoning. Available crew: picard (leadership), data (technical), troi (emotional), scott (engineering), spock (logic), worf (security), observation-lounge (team). Respond with JSON: {\\\"selectedCrew\\\": \\\"crew-name\\\", \\\"confidence\\\": 0.95, \\\"reasoning\\\": \\\"explanation\\\", \\\"alternativeCrew\\\": [\\\"backup1\\\"], \\\"requiresTeam\\\": false}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Query: {{ $json.query }}\\nContext: {{ $json.context }}\\nType: {{ $json.queryType }}\\nComplexity: {{ $json.complexity }}\\nUrgency: {{ $json.urgency }}\"\n    }\n  ],\n  \"max_tokens\": 200,\n  \"temperature\": 0.1\n}",
          "options": {
            "responseTimeout": 30000
          }
        },
        "id": "ai-crew-intelligence-hub",
        "name": "AI Crew Intelligence Hub",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          640,
          300
        ],
        "notes": "Advanced crew selection with confidence scoring"
      },
      {
        "parameters": {
          "jsCode": "// Dynamic Crew Router - Enhanced routing with fallback\nconst routeToCrewMember = () => {\n  const requestData = $input.all()[0].json;\n  const aiResponse = requestData.choices[0].message.content;\n  \n  let crewSelection;\n  try {\n    crewSelection = JSON.parse(aiResponse);\n  } catch (error) {\n    crewSelection = {\n      selectedCrew: extractCrewFromText(aiResponse),\n      confidence: 0.5,\n      reasoning: 'Fallback parsing used',\n      alternativeCrew: ['picard'],\n      requiresTeam: false\n    };\n  }\n  \n  const validCrewMembers = ['picard', 'data', 'troi', 'scott', 'spock', 'worf', 'observation-lounge'];\n  if (!validCrewMembers.includes(crewSelection.selectedCrew)) {\n    crewSelection.selectedCrew = 'picard';\n    crewSelection.confidence = 0.3;\n  }\n  \n  const routingData = {\n    ...requestData,\n    selectedCrew: crewSelection.selectedCrew,\n    confidence: crewSelection.confidence,\n    reasoning: crewSelection.reasoning,\n    alternativeCrew: crewSelection.alternativeCrew || ['picard'],\n    requiresTeam: crewSelection.requiresTeam || false,\n    routingDecisionTime: Date.now() - requestData.processingStartTime,\n    fallbackUsed: crewSelection.confidence < 0.7,\n    crewMemberEndpoint: getCrewMemberEndpoint(crewSelection.selectedCrew)\n  };\n  \n  return [{ json: routingData }];\n};\n\nfunction extractCrewFromText(text) {\n  const crewMembers = ['picard', 'data', 'troi', 'scott', 'spock', 'worf', 'observation-lounge'];\n  const lowerText = text.toLowerCase();\n  \n  for (const crew of crewMembers) {\n    if (lowerText.includes(crew)) {\n      return crew;\n    }\n  }\n  return 'picard';\n}\n\nfunction getCrewMemberEndpoint(crewMember) {\n  const endpoints = {\n    'picard': 'https://alexai-star-trek-agile.vercel.app/api/crew/captain-picard',\n    'data': 'https://alexai-star-trek-agile.vercel.app/api/crew/lieutenant-data',\n    'troi': 'https://alexai-star-trek-agile.vercel.app/api/crew/counselor-troi',\n    'scott': 'https://alexai-star-trek-agile.vercel.app/api/crew/chief-engineer-scott',\n    'spock': 'https://alexai-star-trek-agile.vercel.app/api/crew/commander-spock',\n    'worf': 'https://alexai-star-trek-agile.vercel.app/api/crew/lieutenant-worf',\n    'observation-lounge': 'https://alexai-star-trek-agile.vercel.app/api/crew/observation-lounge'\n  };\n  return endpoints[crewMember] || endpoints['picard'];\n}\n\nreturn routeToCrewMember();"
        },
        "id": "dynamic-crew-router",
        "name": "Dynamic Crew Router",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          840,
          300
        ],
        "notes": "Enhanced routing with fallback strategies"
      },
      {
        "parameters": {
          "url": "={{ $json.crewMemberEndpoint }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Request-ID",
                "value": "={{ $json.requestId }}"
              }
            ]
          },
          "sendBody": true,
          "contentType": "json",
          "jsonBody": "{\n  \"query\": \"{{ $json.query }}\",\n  \"context\": \"{{ $json.context }}\",\n  \"urgency\": \"{{ $json.urgency }}\",\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"metadata\": {\n    \"queryType\": \"{{ $json.queryType }}\",\n    \"confidence\": {{ $json.confidence }},\n    \"reasoning\": \"{{ $json.reasoning }}\"\n  }\n}",
          "options": {
            "responseTimeout": 45000
          }
        },
        "id": "enhanced-crew-member-response",
        "name": "Enhanced Crew Member Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          1040,
          300
        ],
        "notes": "Calls crew member with enhanced metadata"
      },
      {
        "parameters": {
          "jsCode": "// Response Synthesizer - Enhanced response processing\nconst synthesizeResponse = () => {\n  const requestData = $input.all()[0].json;\n  \n  let crewResponse;\n  try {\n    if (typeof requestData === 'string') {\n      crewResponse = { message: requestData };\n    } else if (requestData.response) {\n      crewResponse = requestData.response;\n    } else {\n      crewResponse = requestData;\n    }\n  } catch (error) {\n    crewResponse = {\n      message: 'I apologize, but I encountered an issue processing your request.',\n      error: true\n    };\n  }\n  \n  const totalProcessingTime = Date.now() - requestData.processingStartTime;\n  \n  const synthesizedResponse = {\n    response: crewResponse,\n    metadata: {\n      requestId: requestData.requestId,\n      selectedCrew: requestData.selectedCrew,\n      confidence: requestData.confidence,\n      processingTime: totalProcessingTime,\n      qualityScore: calculateQualityScore(crewResponse, requestData),\n      completedAt: new Date().toISOString()\n    }\n  };\n  \n  return [{ json: synthesizedResponse }];\n};\n\nfunction calculateQualityScore(response, requestData) {\n  let score = 0.5;\n  const responseText = JSON.stringify(response);\n  if (responseText.length > 100) score += 0.2;\n  if (requestData.confidence > 0.8) score += 0.2;\n  if (!response.error) score += 0.3;\n  return Math.min(1.0, score);\n}\n\nreturn synthesizeResponse();"
        },
        "id": "response-synthesizer",
        "name": "Response Synthesizer",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1240,
          300
        ],
        "notes": "Synthesizes responses with quality scoring"
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={{ JSON.stringify($json.response, null, 2) }}",
          "responseHeaders": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Request-ID",
                "value": "={{ $json.metadata.requestId }}"
              },
              {
                "name": "X-Processing-Time",
                "value": "={{ $json.metadata.processingTime }}"
              },
              {
                "name": "X-Quality-Score",
                "value": "={{ $json.metadata.qualityScore }}"
              }
            ]
          }
        },
        "id": "response-delivery",
        "name": "Response Delivery",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1440,
          300
        ],
        "notes": "Delivers optimized response with metadata"
      }
    ],
    "connections": {
      "crew-request-webhook": {
        "main": [
          [
            {
              "node": "request-preprocessor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "request-preprocessor": {
        "main": [
          [
            {
              "node": "ai-crew-intelligence-hub",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "ai-crew-intelligence-hub": {
        "main": [
          [
            {
              "node": "dynamic-crew-router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "dynamic-crew-router": {
        "main": [
          [
            {
              "node": "enhanced-crew-member-response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "enhanced-crew-member-response": {
        "main": [
          [
            {
              "node": "response-synthesizer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "response-synthesizer": {
        "main": [
          [
            {
              "node": "response-delivery",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "timezone": "America/Chicago"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "96d8cf5d-5f49-4f69-969f-aae06f2ddca5",
    "createdAt": "2025-08-10T21:39:59.885Z",
    "updatedAt": "2025-08-10T21:42:39.073Z"
  },
  {
    "id": "X5IcqWwNIOGxh1ob",
    "name": "AlexAI Simplified Crew Coordination",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "webhook-trigger",
        "name": "Crew Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "webhookId": "crew-request"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a crew coordinator. Analyze the request and return ONLY one crew member name: picard, data, troi, scott, spock, worf, or observation-lounge\"\n    },\n    {\n      \"role\": \"user\", \n      \"content\": \"Query: {{ $json.query }}\\nContext: {{ $json.context }}\\nRole: {{ $json.userRole }}\"\n    }\n  ],\n  \"max_tokens\": 10\n}",
          "options": {}
        },
        "id": "crew-selector",
        "name": "AI Crew Selector",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          480,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Simple crew routing logic\nconst aiResponse = $input.first().json.choices[0].message.content.toLowerCase();\nconst originalRequest = $('Crew Request Webhook').first().json;\n\n// Determine crew member endpoint\nlet crewMember = 'captain-picard'; // default\nif (aiResponse.includes('data')) crewMember = 'lieutenant-data';\nelse if (aiResponse.includes('troi')) crewMember = 'counselor-troi';\nelse if (aiResponse.includes('scott')) crewMember = 'chief-engineer-scott';\nelse if (aiResponse.includes('spock')) crewMember = 'commander-spock';\nelse if (aiResponse.includes('worf')) crewMember = 'lieutenant-worf';\nelse if (aiResponse.includes('observation')) crewMember = 'observation-lounge';\n\n// Prepare request for crew member\nconst crewRequest = {\n  query: originalRequest.query,\n  context: originalRequest.context || 'general',\n  userRole: originalRequest.userRole || 'developer',\n  urgency: originalRequest.urgency || 'normal',\n  selectedCrew: crewMember,\n  aiSelection: aiResponse\n};\n\nreturn crewRequest;"
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          720,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/{{ $json.selectedCrew }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($json.query) }},\n  \"context\": {{ JSON.stringify($json.context) }},\n  \"userRole\": {{ JSON.stringify($json.userRole) }},\n  \"urgency\": {{ JSON.stringify($json.urgency) }}\n}",
          "options": {}
        },
        "id": "crew-endpoint",
        "name": "Crew Member Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          960,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"selectedCrew\": {{ JSON.stringify($('Crew Router').first().json.selectedCrew) }},\n  \"aiSelection\": {{ JSON.stringify($('Crew Router').first().json.aiSelection) }},\n  \"response\": {{ JSON.stringify($json.response || $json) }},\n  \"timestamp\": {{ JSON.stringify(new Date().toISOString()) }}\n}",
          "options": {}
        },
        "id": "response-formatter",
        "name": "Response Formatter",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1200,
          300
        ]
      }
    ],
    "connections": {
      "Crew Request Webhook": {
        "main": [
          [
            {
              "node": "AI Crew Selector",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Crew Selector": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Crew Member Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Member Response": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "e2921a55-767a-453f-87ac-995989308843",
    "createdAt": "2025-08-08T22:47:52.836Z",
    "updatedAt": "2025-08-10T21:42:39.338Z"
  },
  {
    "name": "AlexAI Simplified Crew Coordination",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "webhook-trigger",
        "name": "Crew Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          240,
          300
        ],
        "webhookId": "crew-request"
      },
      {
        "parameters": {
          "url": "https://openrouter.ai/api/v1/chat/completions",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a crew coordinator. Analyze the request and return ONLY one crew member name: picard, data, troi, scott, spock, worf, or observation-lounge\"\n    },\n    {\n      \"role\": \"user\", \n      \"content\": \"Query: {{ $json.query }}\\nContext: {{ $json.context }}\\nRole: {{ $json.userRole }}\"\n    }\n  ],\n  \"max_tokens\": 10\n}",
          "options": {}
        },
        "id": "crew-selector",
        "name": "AI Crew Selector",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          480,
          300
        ]
      },
      {
        "parameters": {
          "jsCode": "// Simple crew routing logic\nconst aiResponse = $input.first().json.choices[0].message.content.toLowerCase();\nconst originalRequest = $('Crew Request Webhook').first().json;\n\n// Determine crew member endpoint\nlet crewMember = 'captain-picard'; // default\nif (aiResponse.includes('data')) crewMember = 'lieutenant-data';\nelse if (aiResponse.includes('troi')) crewMember = 'counselor-troi';\nelse if (aiResponse.includes('scott')) crewMember = 'chief-engineer-scott';\nelse if (aiResponse.includes('spock')) crewMember = 'commander-spock';\nelse if (aiResponse.includes('worf')) crewMember = 'lieutenant-worf';\nelse if (aiResponse.includes('observation')) crewMember = 'observation-lounge';\n\n// Prepare request for crew member\nconst crewRequest = {\n  query: originalRequest.query,\n  context: originalRequest.context || 'general',\n  userRole: originalRequest.userRole || 'developer',\n  urgency: originalRequest.urgency || 'normal',\n  selectedCrew: crewMember,\n  aiSelection: aiResponse\n};\n\nreturn crewRequest;"
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          720,
          300
        ]
      },
      {
        "parameters": {
          "url": "={{ $env.NEXTJS_BASE_URL || 'http://localhost:3000' }}/api/crew/{{ $json.selectedCrew }}",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "bodyContentType": "json",
          "jsonBody": "={\n  \"query\": {{ JSON.stringify($json.query) }},\n  \"context\": {{ JSON.stringify($json.context) }},\n  \"userRole\": {{ JSON.stringify($json.userRole) }},\n  \"urgency\": {{ JSON.stringify($json.urgency) }}\n}",
          "options": {}
        },
        "id": "crew-endpoint",
        "name": "Crew Member Response",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          960,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"selectedCrew\": {{ JSON.stringify($('Crew Router').first().json.selectedCrew) }},\n  \"aiSelection\": {{ JSON.stringify($('Crew Router').first().json.aiSelection) }},\n  \"response\": {{ JSON.stringify($json.response || $json) }},\n  \"timestamp\": {{ JSON.stringify(new Date().toISOString()) }}\n}",
          "options": {}
        },
        "id": "response-formatter",
        "name": "Response Formatter",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          1200,
          300
        ]
      }
    ],
    "connections": {
      "Crew Request Webhook": {
        "main": [
          [
            {
              "node": "AI Crew Selector",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Crew Selector": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Crew Member Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Member Response": {
        "main": [
          [
            {
              "node": "Response Formatter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "id": "X5IcqWwNIOGxh1ob"
  },
  {
    "id": "ky17lIPDFA6SjVvr",
    "name": "Simple Crew Workflow",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "crew-request",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "webhook-trigger",
        "name": "Crew Request Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          100,
          300
        ],
        "webhookId": "crew-request-webhook"
      },
      {
        "parameters": {
          "rules": {
            "rules": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "captain-picard",
                      "leftValue": "={{ $json.query.toLowerCase() }}",
                      "rightValue": "strategy",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 0
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "lieutenant-data",
                      "leftValue": "={{ $json.query.toLowerCase() }}",
                      "rightValue": "technical",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 1
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "counselor-troi",
                      "leftValue": "={{ $json.query.toLowerCase() }}",
                      "rightValue": "emotional",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 2
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": false,
                    "leftValue": "",
                    "typeValidation": "strict"
                  },
                  "conditions": [
                    {
                      "id": "observation-lounge",
                      "leftValue": "={{ $json.query.toLowerCase() }}",
                      "rightValue": "meeting",
                      "operator": {
                        "type": "string",
                        "operation": "contains"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "output": 3
              }
            ],
            "fallbackOutput": 0,
            "options": {}
          }
        },
        "id": "crew-router",
        "name": "Crew Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3,
        "position": [
          400,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"crewMember\": \"captain-picard\",\n  \"response\": {\n    \"name\": \"Captain Jean-Luc Picard\",\n    \"role\": \"Commanding Officer\",\n    \"message\": \"Make it so! Based on your query about '{{ $json.query }}', I recommend a strategic approach. Let us engage with wisdom and determination.\",\n    \"strategy\": \"Strategic planning and leadership guidance\",\n    \"priority\": \"{{ $json.urgency || 'normal' }}\"\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"requestId\": \"{{ $json.requestId || Math.random().toString(36).substr(2, 9) }}\"\n}",
          "options": {}
        },
        "id": "captain-picard-response",
        "name": "Captain Picard Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          700,
          100
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"crewMember\": \"lieutenant-data\",\n  \"response\": {\n    \"name\": \"Lieutenant Commander Data\",\n    \"role\": \"Operations Officer\",\n    \"message\": \"Fascinating! Your technical query '{{ $json.query }}' requires logical analysis. I shall provide precise technical guidance.\",\n    \"analysis\": \"Technical problem-solving and optimization\",\n    \"complexity\": \"{{ $json.complexity || 'medium' }}\"\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"requestId\": \"{{ $json.requestId || Math.random().toString(36).substr(2, 9) }}\"\n}",
          "options": {}
        },
        "id": "lieutenant-data-response",
        "name": "Lieutenant Data Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          700,
          200
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"crewMember\": \"counselor-troi\",\n  \"response\": {\n    \"name\": \"Counselor Deanna Troi\",\n    \"role\": \"Ship's Counselor\",\n    \"message\": \"I sense your emotional state regarding '{{ $json.query }}'. Let me help you find balance and clarity in this situation.\",\n    \"guidance\": \"Emotional support and team dynamics\",\n    \"context\": \"{{ $json.context || 'general' }}\"\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"requestId\": \"{{ $json.requestId || Math.random().toString(36).substr(2, 9) }}\"\n}",
          "options": {}
        },
        "id": "counselor-troi-response",
        "name": "Counselor Troi Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          700,
          300
        ]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"success\": true,\n  \"crewMember\": \"observation-lounge\",\n  \"response\": {\n    \"name\": \"Observation Lounge Meeting\",\n  \"role\": \"Crew Coordination\",\n  \"message\": \"Welcome to the observation lounge. Let us discuss '{{ $json.query }}' as a team and coordinate our efforts.\",\n  \"meetingType\": \"crew-coordination\",\n  \"participants\": [\"Captain Picard\", \"Lieutenant Data\", \"Counselor Troi\"],\n  \"agenda\": \"{{ $json.query }}\"\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"requestId\": \"{{ $json.requestId || Math.random().toString(36).substr(2, 9) }}\"\n}",
          "options": {}
        },
        "id": "observation-lounge-response",
        "name": "Observation Lounge Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          700,
          400
        ]
      }
    ],
    "connections": {
      "Crew Request Webhook": {
        "main": [
          [
            {
              "node": "Crew Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crew Router": {
        "main": [
          [
            {
              "node": "Captain Picard Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Lieutenant Data Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Counselor Troi Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Observation Lounge Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "pinData": null,
    "versionId": "4c208d39-ec67-4b3d-8ff2-6184d50686de",
    "createdAt": "2025-08-10T21:21:47.452Z",
    "updatedAt": "2025-08-10T21:53:11.828Z"
  }
]